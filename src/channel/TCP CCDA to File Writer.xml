<channel version="3.5.1">
  <id>e882ff76-1127-4e35-838c-93cbc2655ef9</id>
  <nextMetaDataId>7</nextMetaDataId>
  <name>TCP CCDA to File Writer</name>
  <description>@Modified: 2018-06-10 JER - Initial development of channel.
@Desc:	   Receive inbound CCDA|CCD via TCP listener and write to destination local disk location.
@History:	  
2018-06-10 JER - dependencies on CCD code templates</description>
  <revision>23</revision>
  <sourceConnector version="3.5.1">
    <metaDataId>0</metaDataId>
    <name>sourceConnector</name>
    <properties class="com.mirth.connect.connectors.tcp.TcpReceiverProperties" version="3.5.1">
      <pluginProperties/>
      <listenerConnectorProperties version="3.5.1">
        <host>0.0.0.0</host>
        <port>6662</port>
      </listenerConnectorProperties>
      <sourceConnectorProperties version="3.5.1">
        <responseVariable>None</responseVariable>
        <respondAfterProcessing>false</respondAfterProcessing>
        <processBatch>false</processBatch>
        <firstResponse>true</firstResponse>
        <processingThreads>1</processingThreads>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
        <queueBufferSize>1000</queueBufferSize>
      </sourceConnectorProperties>
      <transmissionModeProperties class="com.mirth.connect.plugins.mllpmode.MLLPModeProperties">
        <pluginPointName>MLLP</pluginPointName>
        <startOfMessageBytes>0B</startOfMessageBytes>
        <endOfMessageBytes>1C0D</endOfMessageBytes>
        <useMLLPv2>false</useMLLPv2>
        <ackBytes>06</ackBytes>
        <nackBytes>15</nackBytes>
        <maxRetries>2</maxRetries>
      </transmissionModeProperties>
      <serverMode>true</serverMode>
      <remoteAddress></remoteAddress>
      <remotePort></remotePort>
      <overrideLocalBinding>false</overrideLocalBinding>
      <reconnectInterval>5000</reconnectInterval>
      <receiveTimeout>0</receiveTimeout>
      <bufferSize>65536</bufferSize>
      <maxConnections>10</maxConnections>
      <keepConnectionOpen>true</keepConnectionOpen>
      <dataTypeBinary>false</dataTypeBinary>
      <charsetEncoding>DEFAULT_ENCODING</charsetEncoding>
      <respondOnNewConnection>0</respondOnNewConnection>
      <responseAddress></responseAddress>
      <responsePort></responsePort>
    </properties>
    <transformer version="3.5.1">
      <elements>
        <com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
          <name>Call getClinicalDocumentInfo -&gt; Set Document Channel Map variables</name>
          <sequenceNumber>0</sequenceNumber>
          <script>/* Modified:
2018-02-11 17:43 CST JER - Added additional checks on documentId for objClinDocInfo.root &amp; extension with fallback to SetId.root &amp; extension
*/
   
/* getPatientRole to set ChannelMap variables */
var debug= 0
var objClinDocInfo= getClinicalDocumentInfo(msg);
channelMap.put(&apos;objClinDocInfo&apos;,objClinDocInfo);

// if objClinicalDocumentInfo root and extension either have a value
if(typeof objClinDocInfo.root !== &apos;undefined&apos;) {
	if ((typeof objClinDocInfo.root !== &apos;undefined&apos;) &amp;&amp; (typeof objClinDocInfo.extension !== &apos;undefined&apos;)) {
		// if both root and extension values exist - concatenate the values for the documentId
		channelMap.put(&apos;documentId&apos;,objClinDocInfo.root.toString()+&quot;.&quot;+objClinDocInfo.extension.toString());
		if (debug&gt;0) { logger.error(&quot;documentId: &quot;+objClinDocInfo.root.toString()+&quot;:&quot;+objClinDocInfo.extension.toString()); }	
	}  else if ((typeof objClinDocInfo.root === &apos;undefined&apos;) &amp;&amp; (typeof objClinDocInfo.extension !== &apos;undefined&apos;)) {
		// if only extension value exists - concatenate the objEncounter.root (i.e. Oid) and the extension values for the documentId
		channelMap.put(&apos;documentId&apos;,objEncounter.root.toString()+&quot;.&quot;+objClinDocInfo.extension.toString());
		if (debug&gt;0) { logger.error(&quot;documentId: &quot;+objEncounter.root.toString()+&quot;.&quot;+objClinDocInfo.extension.toString()); }		
	}  else if ((typeof objClinDocInfo.root !== &apos;undefined&apos;) &amp;&amp; (typeof objClinDocInfo.extension === &apos;undefined&apos;)) {
		// if only root value exists - concatenate the root and the objEncounter extension values for the documentId
		channelMap.put(&apos;documentId&apos;,objClinDocInfo.root.toString()+&quot;.&quot;+objEncounter.extension.toString());
		if (debug&gt;0) { logger.error(&quot;documentId: &quot;+objClinDocInfo.root.toString()+&quot;.&quot;+objEncounter.extension.toString()); }		
	} else { 
		channelMap.put(&quot;documentId&quot;, currentDate_yyyyMMddhhmmss());
	} // end if
// else if reference objClinicalDocumentInfo SetId root and extension either have a value
} else {
	if ((typeof objClinDocInfo.setIdRoot !== &apos;undefined&apos;) &amp;&amp; (typeof objClinDocInfo.setIdExtension !== &apos;undefined&apos;)) {
		// if both SetId root and extension values exist - concatenate the values for the documentId
		channelMap.put(&apos;documentId&apos;,objClinDocInfo.setIdRoot.toString()+&quot;.&quot;+objClinDocInfo.SetIdExtension.toString());
		if (debug&gt;0) { logger.error(&quot;documentId: &quot;+objClinDocInfo.setIdRoot.toString()+&quot;:&quot;+objClinDocInfo.setIdExtension.toString()); }	
	}  else if ((typeof objClinDocInfo.setIdRoot === &apos;undefined&apos;) &amp;&amp; (typeof objClinDocInfo.setIdExtension !== &apos;undefined&apos;)) {
		// if only SetId extension value exists - concatenate the objEncounter.root (i.e. Oid) and the extension values for the documentId
		channelMap.put(&apos;documentId&apos;,objEncounter.root.toString()+&quot;.&quot;+objClinDocInfo.setIdExtension.toString());
		if (debug&gt;0) { logger.error(&quot;documentId: &quot;+objEncounter.root.toString()+&quot;.&quot;+objClinDocInfo.setIdExtension.toString()); }		
	}  else if ((typeof objClinDocInfo.setIdRoot !== &apos;undefined&apos;) &amp;&amp; (typeof objClinDocInfo.setIdExtension === &apos;undefined&apos;)) {
		// if only SetId root value exists - concatenate the root and the objEncounter extension values for the documentId
		channelMap.put(&apos;documentId&apos;,objClinDocInfo.setIdRoot.toString()+&quot;.&quot;+objEncounter.extension.toString());
		if (debug&gt;0) { logger.error(&quot;documentId: &quot;+objClinDocInfo.root.toString()+&quot;.&quot;+objEncounter.extension.toString()); }		
	} else { 
		channelMap.put(&quot;documentId&quot;, currentDate_yyyyMMddhhmmss());
	} // end if
} // end if

if (typeof objClinDocInfo.code !== &apos;undefined&apos;) {
	if (objClinDocInfo.code.toString().length&gt;0) {
		channelMap.put(&apos;documentCode&apos;, objClinDocInfo.code.toString());
		if(debug&gt;0) { logger.error(&quot;documentCode: &quot;+objClinDocInfo.code.toString()); }
	} // end if 
} else { channelMap.put(&quot;documentCode&quot;, &quot;34133-9&quot;); }

if (typeof objClinDocInfo.codeSystemOid !== &apos;undefined&apos;) {
	if (objClinDocInfo.codeSystemOid.toString().length&gt;0) {
		channelMap.put(&apos;documentCodeSystemOid&apos;,objClinDocInfo.codeSystemOid.toString());
		if(debug&gt;0) { logger.error(&quot;documentCodeSystemOid: &quot;+objClinDocInfo.codeSystemOid.toString());	}
	} // end if 
} else { channelMap.put(&quot;documentCodeSystemOid&quot;, &quot;2.16.840.1.113883.6.1&quot;); }

if (typeof objClinDocInfo.codeSystemName !== &apos;undefined&apos;) {
	if (objClinDocInfo.codeSystemName.toString().length&gt;0) {
		channelMap.put(&apos;documentCodeSystem&apos;,objClinDocInfo.codeSystemName.toString());
		if(debug&gt;0) { logger.error(&quot;documentCodeSystem: &quot;+objClinDocInfo.codeSystemName.toString()); }
	} // end if
} else { channelMap.put(&quot;documentCodeSystem&quot;, &quot;2.16.840.1.113883.6.1&quot;); }

if (typeof objClinDocInfo.displayName !== &apos;undefined&apos;) {
	if(objClinDocInfo.displayName.toString().length&gt;0) {
		channelMap.put(&apos;documentCodeDisplayName&apos;,objClinDocInfo.displayName.toString());
		if(debug&gt;0) { logger.error(&quot;documentCodeDisplayName: &quot;+objClinDocInfo.displayName.toString()); }
	} // end if
} else { channelMap.put(&quot;documentCodeDisplayName&quot;, &quot;Summarization of Episode Note&quot;); }

if (typeof objClinDocInfo.title !== &apos;undefined&apos;) {
	if(objClinDocInfo.title.toString().length&gt;0) {
		channelMap.put(&apos;documentTitle&apos;,objClinDocInfo.title.toString());
		if(debug&gt;0) { logger.error(&quot;documentTitle: &quot;+objClinDocInfo.title.toString()); }
	} // end if 
} else { channelMap.put(&quot;documentTitle&quot;, &quot;Summarization of Episode Note&quot;); }

if (typeof objClinDocInfo.creationTime !== &apos;undefined&apos;) {
	if(objClinDocInfo.creationTime.toString().length&gt;0) {
		channelMap.put(&apos;documentCreationTime&apos;,objClinDocInfo.creationTime.toString());
		if(debug&gt;0) { logger.error(&quot;documentCreationTime: &quot;+objClinDocInfo.creationTime.toString()); }
	} // end if 
} else { 
	channelMap.put(&quot;documentCreationTime&quot;, currentDate_yyyyMMddhhmmss()); 
}

if (typeof objClinDocInfo.confCode !== &apos;undefined&apos;) {
	if (objClinDocInfo.confCode.toString().length&gt;0) {
		channelMap.put(&apos;confCode&apos;,objClinDocInfo.confCode.toString());
		if(debug&gt;0) { logger.error(&quot;confCode: &quot;+objClinDocInfo.confCode.toString()); }
	} else { 
		channelMap.put(&quot;confCode&quot;, &quot;N&quot;); 
	}
} else { channelMap.put(&quot;confCode&quot;, &quot;N&quot;); }

if (typeof getHL7v3Confidentiality(objClinDocInfo.confCode.toString()).displayName !== &apos;undefined&apos;) {
	if (getHL7v3Confidentiality(objClinDocInfo.confCode.toString()).displayName.toString().length&gt;0) {
		channelMap.put(&apos;confCodeDisplayName&apos;,getHL7v3Confidentiality(objClinDocInfo.confCode.toString()).displayName.toString());
		if(debug&gt;0) { logger.error(&quot;confCodeDisplayName: &quot;+getHL7v3Confidentiality(objClinDocInfo.confCode.toString()).displayName.toString()); }
	} else { 
		channelMap.put(&quot;confCodeDisplayName&quot;, &quot;Normal&quot;); 
	}// end if 
} else { channelMap.put(&quot;confCodeDisplayName&quot;, &quot;Normal&quot;); }

if (typeof objClinDocInfo.confCodeSystemOid !== &apos;undefined&apos;) {
	if (typeof objClinDocInfo.confCodeSystemOid.toString().length&gt;0) {
		channelMap.put(&apos;confCodeSystemOid&apos;, objClinDocInfo.confCodeSystemOid.toString());
		if(debug&gt;0) { logger.error(&quot;confCodeSystemOid: &quot;+objClinDocInfo.confCodeSystemOid.toString()); }
	} else { 
		channelMap.put(&quot;confCodeSystemOid&quot;, &quot;2.16.840.1.113883.5.25&quot;); 
	}// end if 
} else { channelMap.put(&quot;confCodeSystemOid&quot;, &quot;2.16.840.1.113883.5.25&quot;); }

if (typeof objClinDocInfo.languageCode !== &apos;undefined&apos;) {
	if (objClinDocInfo.languageCode.toString().length&gt;0) {
		channelMap.put(&apos;languageCode&apos;, objClinDocInfo.languageCode.toString());
		if(debug&gt;0) { logger.error(&quot;languageCode: &quot;+objClinDocInfo.languageCode.toString()); }
	} else { 
		channelMap.put(&quot;languageCode&quot;, &quot;en-US&quot;); 
	}
} else { channelMap.put(&quot;languageCode&quot;, &quot;en-US&quot;); }</script>
        </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
        <com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
          <name>Call getEncounter or fallback to getServiceEvent -&gt; Set Service Event Channel Map variables</name>
          <sequenceNumber>1</sequenceNumber>
          <script>/* Modified
2018-02-12 JER - Modified to accommodate tertiary conditions to set both startTime and stopTime using Encounters, ServiceEvents and current datetimestamp
2018-02-11 JER - Modified to determine Xds Metadata StartTime and StopTime primary objEncounter, secondary objServiceEvent and finally set to current_datetime
*/

/* getPatientRole to set ChannelMap variables */
var debug= 0
var objServiceEvent= getServiceEvent(msg);
channelMap.put(&apos;objServiceEvent&apos;,objServiceEvent);

if (typeof objServiceEvent.root !== &apos;undefined&apos;) {
	channelMap.put(&apos;serviceEventRoot&apos;,objServiceEvent.root.toString());	
	if(debug&gt;0) { logger.error(&apos;serviceEventRoot: &apos;+objServiceEvent.root.toString()); }
} else { channelMap.put(&quot;serviceEventRoot&quot;, &quot;&quot;); }

if (typeof objServiceEvent.Id !== &apos;undefined&apos;) {
	channelMap.put(&apos;serviceEventId&apos;,objServiceEvent.Id.toString());	
	if(debug&gt;0) { logger.error(&apos;serviceEventId: &apos;+objServiceEvent.Id.toString()); }
} else { channelMap.put(&quot;serviceEventId&quot;, &quot;&quot;); }

if ((typeof objServiceEvent.root !== &apos;undefined&apos;) &amp;&amp; (typeof objServiceEvent.Id !== &apos;undefined&apos;)) {
	channelMap.put(&apos;serviceEventSubmissionId&apos;,objServiceEvent.root.toString()+&quot;.&quot;+objServiceEvent.Id.toString());	
	if(debug&gt;0) { logger.error(&apos;serviceEventSubmissionId: &apos;+objServiceEvent.root.toString()+&quot;.&quot;+objServiceEvent.Id.toString()); }
} else { channelMap.put(&quot;serviceEventSubmissionId&quot;, &quot;&quot;); }

var objEncounter= getEncounter(msg);
channelMap.put(&apos;objEncounter&apos;,objEncounter);

// primary objEncounter startTime, secondary objServiceEvent and last ditch effort set to current datetime
if(typeof objEncounter !== &apos;undefined&apos;) {
	if(typeof objEncounter.startTime !== &apos;undefined&apos;) {
	// use Encounter startTime
		if(objEncounter.startTime.toString().substring(0,3) == &apos;201&apos;) {
			channelMap.put(&apos;serviceStartTime&apos;,objEncounter.startTime.toString());
			if(debug&gt;0) { logger.error(&apos;serviceStartTime: &apos;+objEncounter.startTime.toString()); }
	// use Encounter stopTime
		} else if(objEncounter.stopTime.toString().substring(0,3) == &apos;201&apos;) {
			channelMap.put(&apos;serviceStartTime&apos;,objEncounter.stopTime.toString());
			if(debug&gt;0) { logger.error(&apos;serviceStartTime: &apos;+objEncounter.stopTime.toString()); }
		} else {
	// use current datetime
			channelMap.put(&apos;serviceStartTime&apos;, currentDate_yyyyMMddhhmmss()); 
			if(debug&gt;0) { logger.error(&apos;serviceStartTime: &apos;+currentDate_yyyyMMddhhmmss().toString()); }	
		}
	} // end if
} else {
	if(typeof objServiceEvent !== &apos;undefined&apos;) {
		if (typeof objServiceEvent.startTime !== &apos;undefined&apos;) {
	// use ServiceEvent startTime 
			if(objServiceEvent.startTime.toString().substring(0,3) == &apos;201&apos;) {
				channelMap.put(&apos;serviceStartTime&apos;,objServiceEvent.startTime.toString());
				if(debug&gt;0) { logger.error(&apos;serviceStartTime: &apos;+objServiceEvent.startTime.toString()); }
	// use ServiceEvent stopTime 
			} else if (objServiceEvent.stopTime.toString().substring(0,3) == &apos;201&apos;) {
				channelMap.put(&apos;serviceStartTime&apos;, objServiceEvent.stopTime.toString()); 
				if(debug&gt;0) { logger.error(&apos;serviceStartTime: &apos;+objServiceEvent.stopTime.toString()); }
			} else {
	// use current datetime
				channelMap.put(&apos;serviceStartTime&apos;, currentDate_yyyyMMddhhmmss()); 
				if(debug&gt;0) { logger.error(&apos;serviceStartTime: &apos;+currentDate_yyyyMMddhhmmss().toString()); }
			} // end if
		} // end if 
	} else {
	// use current datetime
		channelMap.put(&apos;serviceStartTime&apos;, currentDate_yyyyMMddhhmmss()); 
		if(debug&gt;0) { logger.error(&apos;serviceStartTime: &apos;+currentDate_yyyyMMddhhmmss().toString()); }
	} // end if 
} // end if 

// primary objEncounter stopTime, secondary objServiceEvent and last ditch effort set to current datetime
// use objEncounter stopTime
if(typeof objEncounter !== &apos;undefined&apos;) {
	if(typeof objEncounter.stopTime !== &apos;undefined&apos;) {
	// use serviceEvent stopTime
		if(objEncounter.stopTime.toString().substring(0,3) == &apos;201&apos;) {
			channelMap.put(&apos;serviceStopTime&apos;,objEncounter.stopTime.toString());
			if(debug&gt;0) { logger.error(&apos;serviceStopTime: &apos;+objEncounter.stopTime.toString()); }
	// use serviceEvent startTime
		} else if ($(&apos;serviceStartTime&apos;).toString().substring(0,3) == &apos;201&apos;) {
			channelMap.put(&apos;serviceStopTime&apos;,$(&apos;serviceStartTime&apos;).toString());
			if(debug&gt;0) { logger.error(&apos;serviceStopTime: &apos;+$(&apos;serviceStartTime&apos;).toString()); }
		} else {
	// use current datetime
			channelMap.put(&apos;serviceStopTime&apos;, currentDate_yyyyMMddhhmmss()); 
			if(debug&gt;0) { logger.error(&apos;serviceStopTime: &apos;+currentDate_yyyyMMddhhmmss().toString()); }
		} // end if 
	} // end if 
} else {
	// use objServiceEvent stopTime
	if (typeof objServiceEvent.stopTime !== &apos;undefined&apos;) {
		if(objServiceEvent.stopTime.toString().substring(0,3) == &apos;201&apos;) {
			channelMap.put(&apos;serviceStopTime&apos;,objServiceEvent.stopTime.toString());
			if(debug&gt;0) { logger.error(&apos;serviceStopTime: &apos;+objServiceEvent.stopTime.toString()); }
	// use objServiceEvent startTime
		} else if(objServiceEvent.startTime.toString().substring(0,3) == &apos;201&apos;) {
			channelMap.put(&apos;serviceStopTime&apos;,$(&apos;serviceStartTime&apos;).toString());
			if(debug&gt;0) { logger.error(&apos;serviceStopTime: &apos;+$(&apos;serviceStartTime&apos;).toString()); }	
		} else {
	// use current datetime
			channelMap.put(&apos;serviceStopTime&apos;, currentDate_yyyyMMddhhmmss()); 
			if(debug&gt;0) { logger.error(&apos;serviceStopTime: &apos;+currentDate_yyyyMMddhhmmss().toString()); }			
		} // end if 
	} else { 
	// use current datetime
		channelMap.put(&apos;serviceStopTime&apos;, currentDate_yyyyMMddhhmmss()); 
		if(debug&gt;0) { logger.error(&apos;serviceStopTime: &apos;+currentDate_yyyyMMddhhmmss().toString()); }
	} // end if 
} // end if</script>
        </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
        <com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
          <name>Call getPatientRole -&gt; Set Patient Channel Map variables</name>
          <sequenceNumber>2</sequenceNumber>
          <script>/* getPatientRole to set ChannelMap variables */
var debug= 0
var objPatientRole= getPatientRole(msg);
channelMap.put(&apos;objPatientRole&apos;,objPatientRole);

if (typeof objPatientRole.patientId !== &apos;undefined&apos;) {
	channelMap.put(&quot;patientId&quot;,objPatientRole.patientId);
	if(debug&gt;0) { logger.error(&quot;patientId: &quot;+objPatientRole.patientId); }
} else { channelMap.put(&quot;patientId&quot;, &quot;&quot;); }

if (typeof objPatientRole.root !== &apos;undefined&apos;) {
	channelMap.put(&quot;patientIdRootOid&quot;,objPatientRole.root);
	if(debug&gt;0) { logger.error(&quot;localAssigningAuthority: &quot;+objPatientRole.root); }
} else { channelMap.put(&quot;patientIdRootOid&quot;, &quot;&quot;); }
/*
if (typeof getXdsSourcePatientInfo(objPatientRole) !== &apos;undefined&apos;) {
	channelMap.put(&quot;sourcePatientInfo&quot;,getXdsSourcePatientInfo(objPatientRole));
	if(debug&gt;0) { logger.error(&quot;sourcePatientId: &quot;+getXdsSourcePatientId(objPatientRole)); }
}
*/
// left off here - 2018-01-30 10:17 CT

// 2018-02-01 12:52 JER - Re-added the set of sourcePatientId channelMap variable
if (typeof getXdsSourcePatientId(objPatientRole) !== &apos;undefined&apos;) {
	channelMap.put(&quot;sourcePatientId&quot;,getXdsSourcePatientId(objPatientRole));
	if(debug&gt;0) { logger.error(&quot;sourcePatientId: &quot;+getXdsSourcePatientId(objPatientRole).toString()); }
} else { channelMap.put(&quot;sourcePatientId&quot;, &quot;&quot;); }

if (typeof getXdsSourcePatientInfo(objPatientRole).pid3 !== &apos;undefined&apos;) {
	channelMap.put(&quot;sourcePatientInfo_pid3&quot;,getXdsSourcePatientInfo(objPatientRole).pid3);
	if(debug&gt;0) { logger.error(&quot;sourcePatientInfo_pid3: &quot;+getXdsSourcePatientInfo(objPatientRole).pid3.toString()); }
} else { channelMap.put(&quot;sourcePatientInfo_pid3&quot;, &quot;&quot;); }

if (typeof getXdsSourcePatientInfo(objPatientRole).pid5 !== &apos;undefined&apos;) {
	channelMap.put(&quot;sourcePatientInfo_pid5&quot;,getXdsSourcePatientInfo(objPatientRole).pid5);
	if(debug&gt;0) { logger.error(&quot;sourcePatientInfo_pid5: &quot;+getXdsSourcePatientInfo(objPatientRole).pid5.toString()); }
} else { channelMap.put(&quot;sourcePatientInfo_pid5&quot;, &quot;&quot;); }

if (typeof getXdsSourcePatientInfo(objPatientRole).pid7 !== &apos;undefined&apos;) {
	channelMap.put(&quot;sourcePatientInfo_pid7&quot;,getXdsSourcePatientInfo(objPatientRole).pid7);
	if(debug&gt;0) { logger.error(&quot;sourcePatientInfo_pid7: &quot;+getXdsSourcePatientInfo(objPatientRole).pid7.toString()); }
} else { channelMap.put(&quot;sourcePatientInfo_pid7&quot;, &quot;&quot;); }

if (typeof getXdsSourcePatientInfo(objPatientRole).pid8 !== &apos;undefined&apos;) {
	channelMap.put(&quot;sourcePatientInfo_pid8&quot;,getXdsSourcePatientInfo(objPatientRole).pid8);
	if(debug&gt;0) { logger.error(&quot;sourcePatientInfo_pid8: &quot;+getXdsSourcePatientInfo(objPatientRole).pid8.toString()); }
} else { channelMap.put(&quot;sourcePatientInfo_pid8&quot;, &quot;&quot;); }

if (typeof getXdsSourcePatientInfo(objPatientRole).pid11 !== &apos;undefined&apos;) {
	channelMap.put(&quot;sourcePatientInfo_pid11&quot;,getXdsSourcePatientInfo(objPatientRole).pid11);
	if(debug&gt;0) { logger.error(&quot;sourcePatientInfo_pid11: &quot;+getXdsSourcePatientInfo(objPatientRole).pid11.toString()); }
} else { channelMap.put(&quot;sourcePatientInfo_pid11&quot;, &quot;&quot;); }

if (typeof getXdsSourcePatientInfo(objPatientRole).pid13 !== &apos;undefined&apos;) {
	channelMap.put(&quot;sourcePatientInfo_pid13&quot;,getXdsSourcePatientInfo(objPatientRole).pid13);
	if(debug&gt;0) { logger.error(&quot;sourcePatientInfo_pid13: &quot;+getXdsSourcePatientInfo(objPatientRole).pid13.toString()); }
} else { channelMap.put(&quot;sourcePatientInfo_pid13&quot;, &quot;&quot;); }

if (typeof objPatientRole.lastName !== &apos;undefined&apos;) {
	channelMap.put(&quot;lastName&quot;,objPatientRole.lastName);
	if(debug&gt;0) { logger.error(&quot;objPatientRole.lastName: &quot;+objPatientRole.lastName.toString()); }
} else { channelMap.put(&quot;lastName&quot;, &quot;&quot;); }

if (typeof objPatientRole.firstName !== &apos;undefined&apos;) {
	channelMap.put(&quot;firstName&quot;,objPatientRole.firstName);
	if(debug&gt;0) { logger.error(&quot;objPatientRole.firstName: &quot;+objPatientRole.firstName.toString()); }
} else { channelMap.put(&quot;firstName&quot;, &quot;&quot;); }

// channelMap.put(&quot;gender&quot;,getHL7v3AdministrativeGender(objPatientRole.gender).displayName.toString());
if (typeof objPatientRole.gender !== &apos;undefined&apos;) {
	channelMap.put(&quot;gender&quot;,objPatientRole.gender);
	if(debug&gt;0) { logger.error(&quot;objPatientRole.gender: &quot;+objPatientRole.gender.toString()); }
} else { channelMap.put(&quot;gender&quot;, &quot;&quot;); }

if (typeof objPatientRole.dateOfBirth !== &apos;undefined&apos;) {
	channelMap.put(&quot;dateOfBirth&quot;,objPatientRole.dateOfBirth);
	if(debug&gt;0) { logger.error(&quot;objPatientRole.dateOfBirth: &quot;+objPatientRole.dateOfBirth.toString()); }
} else { channelMap.put(&quot;dateOfBirth&quot;, &quot;&quot;); }

if (typeof objPatientRole.phoneNumber !== &apos;undefined&apos;) {
	channelMap.put(&quot;phoneNumber&quot;,objPatientRole.phoneNumber);
	if(debug&gt;0) { logger.error(&quot;objPatientRole.phoneNumber: &quot;+objPatientRole.phoneNumber.toString()); }
} else { channelMap.put(&quot;phoneNumber&quot;, &quot;&quot;); }</script>
        </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
        <com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
          <name>Set Xds Parameters</name>
          <sequenceNumber>3</sequenceNumber>
          <script>/* Modified
2018-02-11 18:06 CT JER - Modified to include additional handling on the SourceOID, primarily pull from representedOrganization Id in Author, then Custodian and final ditch effort pull from the patientRole patient id root
*/

// additional configurations
var debug= 0;
// static documentSource OID - can be configured to pull based on sending System attributes if needed
var objCustodian= channelMap.put(&apos;objCustodian&apos;,getCustodian(msg));
var objAuthor= $(&apos;objAuthor&apos;);
var objClinDocInfo= $(&apos;objClinDocInfo&apos;);

if(debug&gt;0) { logger.error(&apos;Check for objClinDocInfo: &apos;+objClinDocInfo); }

if(typeof objClinDocInfo !== &apos;undefined&apos;) {
	// if Clinical Document Id Root exists
	var sourceOid= objClinDocInfo.root.toString();
	channelMap.put(&apos;sourceOid&apos;,objClinDocInfo.root.toString());
	if(debug&gt;0) { logger.error(&apos;sourceOid: &apos;+objClinDocInfo.root.toString()); }
} else {
	if(debug&gt;0) { logger.error(&apos;Check for objAuthor: &apos;+objAuthor); }
	if(typeof objAuthor !== &apos;undefined&apos;) {
		// if author get from representedOrganization Id root
		if (typeof objAuthor.documentSourceOid !== &apos;undefined&apos;) {
			channelMap.put(&apos;sourceOid&apos;,objAuthor.documentSourceOid.toString());	
			if(debug&gt;0) { logger.error(&apos;sourceOid: &apos;+objAuthor.documentSourceOid.toString()); }
		} else {
		// else if custodian get from representedOrganization Id root
			if(debug&gt;0) { logger.error(&apos;Check for objCustodian: &apos;+objCustodian); }
			if(typeof objCustodian !== &apos;undefined&apos;) {
				channelMap.put(&apos;sourceOid&apos;,objCustodian.repOrgIdRoot.toString());
				if(debug&gt;0) { logger.error(&apos;sourceOid: &apos;+objCustodian.repOrgIdRoot.toString()); }
			} else {
				// else last resort pull from the patientRole id root
				if(debug&gt;0) { logger.error(&apos;Check for objPatientRole: &apos;+objPatientRole); }
				if(typeof $(&apos;objPatientRole&apos;) !== &apos;undefined&apos;) {
					channelMap.put(&apos;sourceOid&apos;,$(&apos;objPatientRole&apos;).patientIdRootOid.toString());
					if(debug&gt;0) { logger.error(&apos;sourceOid: &apos;+$(&apos;objPatientRole&apos;).patientIdRootOid.toString()); }
				} // end if 
			} // end if 
		} // end if 
	} // end if 
} // end if</script>
        </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
      </elements>
      <inboundTemplate encoding="base64"></inboundTemplate>
      <outboundTemplate encoding="base64"></outboundTemplate>
      <inboundDataType>XML</inboundDataType>
      <outboundDataType>XML</outboundDataType>
      <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.5.1">
        <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.5.1">
          <stripNamespaces>false</stripNamespaces>
        </serializationProperties>
        <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.5.1">
          <splitType>Element_Name</splitType>
          <elementName></elementName>
          <level>1</level>
          <query></query>
          <batchScript></batchScript>
        </batchProperties>
      </inboundProperties>
      <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.5.1">
        <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.5.1">
          <stripNamespaces>false</stripNamespaces>
        </serializationProperties>
        <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.5.1">
          <splitType>Element_Name</splitType>
          <elementName></elementName>
          <level>1</level>
          <query></query>
          <batchScript></batchScript>
        </batchProperties>
      </outboundProperties>
    </transformer>
    <filter version="3.5.1">
      <elements/>
    </filter>
    <transportName>TCP Listener</transportName>
    <mode>SOURCE</mode>
    <enabled>true</enabled>
    <waitForPrevious>true</waitForPrevious>
  </sourceConnector>
  <destinationConnectors>
    <connector version="3.5.1">
      <metaDataId>5</metaDataId>
      <name>Write CCD to File</name>
      <properties class="com.mirth.connect.connectors.file.FileDispatcherProperties" version="3.5.1">
        <pluginProperties/>
        <destinationConnectorProperties version="3.5.1">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>10000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <threadAssignmentVariable></threadAssignmentVariable>
          <validateResponse>false</validateResponse>
          <resourceIds class="linked-hash-map">
            <entry>
              <string>Default Resource</string>
              <string>[Default Resource]</string>
            </entry>
          </resourceIds>
          <queueBufferSize>1000</queueBufferSize>
          <reattachAttachments>true</reattachAttachments>
        </destinationConnectorProperties>
        <scheme>FILE</scheme>
        <host>C:/temp/Mirth/messages/in/UpWork2/</host>
        <outputPattern>ccd_${date.get(&apos;yyyyMMddHHmmss&apos;)}.xml</outputPattern>
        <anonymous>true</anonymous>
        <username>anonymous</username>
        <password>anonymous</password>
        <timeout>10000</timeout>
        <secure>true</secure>
        <passive>true</passive>
        <validateConnection>true</validateConnection>
        <outputAppend>true</outputAppend>
        <errorOnExists>false</errorOnExists>
        <temporary>false</temporary>
        <binary>false</binary>
        <charsetEncoding>DEFAULT_ENCODING</charsetEncoding>
        <template>${message.encodedData}</template>
      </properties>
      <transformer version="3.5.1">
        <elements/>
        <inboundDataType>XML</inboundDataType>
        <outboundDataType>XML</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.5.1">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.5.1">
            <stripNamespaces>true</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.5.1">
            <splitType>Element_Name</splitType>
            <elementName></elementName>
            <level>1</level>
            <query></query>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.5.1">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.5.1">
            <stripNamespaces>true</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.5.1">
            <splitType>Element_Name</splitType>
            <elementName></elementName>
            <level>1</level>
            <query></query>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="3.5.1">
        <elements/>
        <inboundTemplate encoding="base64"></inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundDataType>XML</inboundDataType>
        <outboundDataType>XML</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.5.1">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.5.1">
            <stripNamespaces>true</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.5.1">
            <splitType>Element_Name</splitType>
            <elementName></elementName>
            <level>1</level>
            <query></query>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.5.1">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.5.1">
            <stripNamespaces>true</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.5.1">
            <splitType>Element_Name</splitType>
            <elementName></elementName>
            <level>1</level>
            <query></query>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="3.5.1">
        <elements/>
      </filter>
      <transportName>File Writer</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
    <connector version="3.5.1">
      <metaDataId>6</metaDataId>
      <name>Write CCD to File (Linux)</name>
      <properties class="com.mirth.connect.connectors.file.FileDispatcherProperties" version="3.5.1">
        <pluginProperties/>
        <destinationConnectorProperties version="3.5.1">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>10000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <threadAssignmentVariable></threadAssignmentVariable>
          <validateResponse>false</validateResponse>
          <resourceIds class="linked-hash-map">
            <entry>
              <string>Default Resource</string>
              <string>[Default Resource]</string>
            </entry>
          </resourceIds>
          <queueBufferSize>1000</queueBufferSize>
          <reattachAttachments>true</reattachAttachments>
        </destinationConnectorProperties>
        <scheme>FILE</scheme>
        <host>/var/mirthconnect/ccda/received/</host>
        <outputPattern>ccda_${pid3}_${date.get(&apos;yyyyMMdd&apos;)}-${date.get(&apos;HHmmss&apos;)}.xml</outputPattern>
        <anonymous>true</anonymous>
        <username>anonymous</username>
        <password>anonymous</password>
        <timeout>10000</timeout>
        <secure>true</secure>
        <passive>true</passive>
        <validateConnection>true</validateConnection>
        <outputAppend>true</outputAppend>
        <errorOnExists>false</errorOnExists>
        <temporary>false</temporary>
        <binary>false</binary>
        <charsetEncoding>DEFAULT_ENCODING</charsetEncoding>
        <template>${message.encodedData}</template>
      </properties>
      <transformer version="3.5.1">
        <elements/>
        <inboundDataType>XML</inboundDataType>
        <outboundDataType>XML</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.5.1">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.5.1">
            <stripNamespaces>true</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.5.1">
            <splitType>Element_Name</splitType>
            <elementName></elementName>
            <level>1</level>
            <query></query>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.5.1">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.5.1">
            <stripNamespaces>true</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.5.1">
            <splitType>Element_Name</splitType>
            <elementName></elementName>
            <level>1</level>
            <query></query>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="3.5.1">
        <elements/>
        <inboundDataType>XML</inboundDataType>
        <outboundDataType>XML</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.5.1">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.5.1">
            <stripNamespaces>true</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.5.1">
            <splitType>Element_Name</splitType>
            <elementName></elementName>
            <level>1</level>
            <query></query>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.5.1">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.5.1">
            <stripNamespaces>true</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.5.1">
            <splitType>Element_Name</splitType>
            <elementName></elementName>
            <level>1</level>
            <query></query>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="3.5.1">
        <elements/>
      </filter>
      <transportName>File Writer</transportName>
      <mode>DESTINATION</mode>
      <enabled>false</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
  </destinationConnectors>
  <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
  <postprocessingScript>// This script executes once after a message has been processed
return;</postprocessingScript>
  <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</deployScript>
  <undeployScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</undeployScript>
  <properties version="3.5.1">
    <clearGlobalChannelMap>true</clearGlobalChannelMap>
    <messageStorageMode>DEVELOPMENT</messageStorageMode>
    <encryptData>false</encryptData>
    <removeContentOnCompletion>false</removeContentOnCompletion>
    <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
    <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
    <initialState>STARTED</initialState>
    <storeAttachments>false</storeAttachments>
    <metaDataColumns>
      <metaDataColumn>
        <name>SOURCE</name>
        <type>STRING</type>
        <mappingName>mirth_source</mappingName>
      </metaDataColumn>
      <metaDataColumn>
        <name>TYPE</name>
        <type>STRING</type>
        <mappingName>mirth_type</mappingName>
      </metaDataColumn>
      <metaDataColumn>
        <name>SOURCEOID</name>
        <type>STRING</type>
        <mappingName>sourceOid</mappingName>
      </metaDataColumn>
      <metaDataColumn>
        <name>DOCID</name>
        <type>STRING</type>
        <mappingName>documentId</mappingName>
      </metaDataColumn>
      <metaDataColumn>
        <name>DOCTITLE</name>
        <type>STRING</type>
        <mappingName>documentTitle</mappingName>
      </metaDataColumn>
      <metaDataColumn>
        <name>DOCDATE</name>
        <type>STRING</type>
        <mappingName>documentCreationTime</mappingName>
      </metaDataColumn>
      <metaDataColumn>
        <name>PATIENTID</name>
        <type>STRING</type>
        <mappingName>patientId</mappingName>
      </metaDataColumn>
    </metaDataColumns>
    <attachmentProperties version="3.5.1">
      <type>None</type>
      <properties/>
    </attachmentProperties>
    <resourceIds class="linked-hash-map">
      <entry>
        <string>Default Resource</string>
        <string>[Default Resource]</string>
      </entry>
    </resourceIds>
  </properties>
  <exportData>
    <metadata>
      <enabled>true</enabled>
      <lastModified>
        <time>1528988092680</time>
        <timezone>America/Chicago</timezone>
      </lastModified>
      <pruningSettings>
        <archiveEnabled>true</archiveEnabled>
      </pruningSettings>
    </metadata>
    <codeTemplateLibraries>
      <codeTemplateLibrary version="3.5.1">
        <id>690e66f5-be75-4877-9354-42bb679b7bf6</id>
        <name>CCD</name>
        <revision>33</revision>
        <lastModified>
          <time>1528296884011</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <description>CCD</description>
        <includeNewChannels>false</includeNewChannels>
        <enabledChannelIds>
          <string>38e80069-5a80-4483-9a22-02c928973719</string>
          <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
          <string>e882ff76-1127-4e35-838c-93cbc2655ef9</string>
        </enabledChannelIds>
        <disabledChannelIds>
          <string>6a2a6c33-33da-4783-b823-bd95bf387981</string>
          <string>5beae4c2-e7f8-4ae3-9fca-703dea9233a2</string>
          <string>3f5ab859-f917-484f-b841-7c9e39174b8e</string>
          <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
          <string>24504c80-a7ef-496d-bca0-c25ce27f4d19</string>
          <string>06d19851-fbd2-446b-be8f-12965d966d2a</string>
          <string>280d822c-1479-4fb6-9e2a-b7267e540c63</string>
          <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
          <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
          <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
          <string>1ae4e7ac-e62f-468c-aa2a-99cbd6139838</string>
          <string>2f6cd9fb-90e2-4121-b05a-cad72d278cc3</string>
          <string>360b408e-86e7-43da-875a-11dd5f07db7e</string>
          <string>0edf321a-b712-47e2-972a-03f2c4c8f0ac</string>
          <string>05075884-fedf-4b8c-96b1-eecaaaf97842</string>
          <string>1892f241-d643-4abb-b0af-b20b87e0cf12</string>
          <string>15708463-af53-428c-88f5-16351dd49b2e</string>
          <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
          <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
          <string>03bc65a0-25b4-48f5-8455-7e58e71b1446</string>
          <string>0638775c-6c87-4a71-b4b3-7ae52be05c1b</string>
          <string>2dbdcefd-11b5-42c8-a365-05038df92fef</string>
          <string>082c9258-e026-460b-a7bb-e67391ef65f9</string>
          <string>06bd4ce9-2338-4c78-86fb-2e04ff9f9e08</string>
          <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
          <string>27139815-1d29-4f32-ad00-fc266f2448cd</string>
          <string>197d7939-edb9-4dc7-af2d-ab91ae9023ad</string>
          <string>368263c0-b071-4c57-afeb-61dc82a898be</string>
          <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
        </disabledChannelIds>
        <codeTemplates>
          <codeTemplate version="3.5.1">
            <id>6b3af922-f209-40b0-a3d2-074f147abe37</id>
            <name>getAssignedAuthor</name>
            <revision>22</revision>
            <lastModified>
              <time>1519634065036</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/** getAssignedAuthor(msg)

  	- Desc: This function receives CCD assignedAuthor XML Object and returns JavaScript object
  	- Modified 
  	2018-02-24 04:18 CT JER - Modified the msg[&apos;assignedAuthor&apos;][&apos;representedOrganization&apos;].toString() evaluation !== undefined to length&gt;0
	
   	@param {XML} msg - this contains the raw message (string)
	@return {object} getAssignedAuthor - contains getAssignedAuthor JS object and related properties.
*/

function getAssignedAuthor(msg) {

	var debug= 0;
	var objAssignedAuthor= new Object;

	if(debug&gt;0) { 
		logger.error(&apos;getAssignedAuthor msg: &apos;+msg);
		logger.error(&apos;getAssignedAuthor msg[assignedAuthor]: &apos;+JSON.stringify(msg[&apos;assignedAuthor&apos;])+
		&apos; typeof: &apos;+msg[&apos;assignedAuthor&apos;]+
		&apos; length: &apos;+msg[&apos;assignedAuthor&apos;].toString().length); 
	} // end if 
	
	if(typeof msg[&apos;assignedAuthor&apos;] !== &apos;undefined&apos;) {
		if(msg[&apos;assignedAuthor&apos;].children().length()&gt;0) {
			
			// &lt;assignedAuthor classCode=&quot;ASSIGNED&quot;&gt;
			// set assignedAuthor classCode
			if(typeof msg[&apos;assignedAuthor&apos;][&apos;@classCode&apos;] !== &apos;undefined&apos;) {
				if(debug&gt;0) { logger.error(&apos;msg[assignedAuthor][@classCode]: &apos;+msg[&apos;assignedAuthor&apos;][&apos;@classCode&apos;].toString()); }
				objAssignedAuthor.classCode= msg[&apos;assignedAuthor&apos;][&apos;@classCode&apos;].toString();
			} // end if
			
			// &lt;id assigningAuthorityName=&quot;INLP_FIN&quot; extension=&quot;INLP&quot; root=&quot;2.16.840.1.113883.3.2139.200&quot;/&gt;
			// set assignedAuthor Id
			if(typeof msg[&apos;assignedAuthor&apos;][&apos;id&apos;] !== &apos;undefined&apos;) {
				// set assignedAuthor Id assigningAuthorityName
				if(typeof msg[&apos;assignedAuthor&apos;][&apos;id&apos;][&apos;@assigningAuthorityName&apos;] !== &apos;undefined&apos;) {
					if(debug&gt;0) { logger.error(&apos;msg[assignedAuthor][id][@assigningAuthorityName]: &apos;+msg[&apos;assignedAuthor&apos;][&apos;id&apos;][&apos;@assigningAuthorityName&apos;].toString()); }
					objAssignedAuthor.assigningAuthorityName= msg[&apos;assignedAuthor&apos;][&apos;id&apos;][&apos;@assigningAuthorityName&apos;].toString();
				} // end if
				// set assignedAuthor Id root
				if(typeof msg[&apos;assignedAuthor&apos;][&apos;id&apos;][&apos;@root&apos;] !== &apos;undefined&apos;) {
					if(debug&gt;0) { logger.error(&apos;msg[assignedAuthor][id][@root]: &apos;+msg[&apos;assignedAuthor&apos;][&apos;id&apos;][&apos;@root&apos;].toString()); }
					objAssignedAuthor.root= msg[&apos;assignedAuthor&apos;][&apos;id&apos;][&apos;@root&apos;].toString();
				} // end if
				// set assignedAuthor Id extension
				if(typeof msg[&apos;assignedAuthor&apos;][&apos;id&apos;][&apos;@extension&apos;] !== &apos;undefined&apos;) {
					if(debug&gt;0) { logger.error(&apos;msg[assignedAuthor][id][@extension]: &apos;+msg[&apos;assignedAuthor&apos;][&apos;id&apos;][&apos;@extension&apos;].toString()); }
					objAssignedAuthor.extension= msg[&apos;assignedAuthor&apos;][&apos;id&apos;][&apos;@extension&apos;].toString();
				} // end if
			} // end if
			
			// set assignedAuthor Code
			if(typeof msg[&apos;assignedAuthor&apos;][&apos;code&apos;] !== &apos;undefined&apos;) {
				// set assignedAuthor code code
				if(typeof msg[&apos;assignedAuthor&apos;][&apos;code&apos;][&apos;@code&apos;] !== &apos;undefined&apos;) {
					if(debug&gt;0) { logger.error(&apos;msg[assignedAuthor][code][@code]: &apos;+msg[&apos;assignedAuthor&apos;][&apos;code&apos;][&apos;@code&apos;].toString()); }
					objAssignedAuthor.code= msg[&apos;assignedAuthor&apos;][&apos;code&apos;][&apos;@code&apos;].toString();
				} // end if
				// set assignedAuthor code codeSystemOid
				if(typeof msg[&apos;assignedAuthor&apos;][&apos;code&apos;][&apos;@codeSystem&apos;] !== &apos;undefined&apos;) {
					if(debug&gt;0) { logger.error(&apos;msg[assignedAuthor][code][@codeSystem]: &apos;+msg[&apos;assignedAuthor&apos;][&apos;code&apos;][&apos;@codeSystem&apos;].toString()); }
					objAssignedAuthor.codeSystem= msg[&apos;assignedAuthor&apos;][&apos;code&apos;][&apos;@codeSystem&apos;].toString();
				} // end if
				// set assignedAuthor code codeSystemName
				if(typeof msg[&apos;assignedAuthor&apos;][&apos;code&apos;][&apos;@codeSystemName&apos;] !== &apos;undefined&apos;) {
					if(debug&gt;0) { logger.error(&apos;msg[assignedAuthor][code][@codeSystemName]: &apos;+msg[&apos;assignedAuthor&apos;][&apos;code&apos;][&apos;@codeSystemName&apos;].toString()); }
					objAssignedAuthor.codeSystemName= msg[&apos;assignedAuthor&apos;][&apos;code&apos;][&apos;@codeSystemName&apos;].toString();
				} // end if
				// set assignedAuthor code displayName
				if(typeof msg[&apos;assignedAuthor&apos;][&apos;code&apos;][&apos;@displayName&apos;] !== &apos;undefined&apos;) {
					if(debug&gt;0) { logger.error(&apos;msg[assignedAuthor][code][@displayName]: &apos;+msg[&apos;assignedAuthor&apos;][&apos;code&apos;][&apos;@displayName&apos;].toString()); }
					objAssignedAuthor.codeDisplayName= msg[&apos;assignedAuthor&apos;][&apos;code&apos;][&apos;@displayName&apos;].toString();
				} // end if
			} // end if
			
	
			// set assignedAuthor assignedAuthoringDevice
			/* &lt;assignedAuthoringDevice&gt;&lt;manufacturerModelName&gt;Cerner Corporation&lt;/manufacturerModelName&gt;&lt;softwareName&gt;Millennium Clinical Document Generator&lt;/softwareName&gt;&lt;/assignedAuthoringDevice&gt; */
			if(typeof msg[&apos;assignedAuthor&apos;][&apos;assignedAuthoringDevice&apos;] !== &apos;undefined&apos;) {
				// get manufacturer
				if(typeof msg[&apos;assignedAuthor&apos;][&apos;assignedAuthoringDevice&apos;][&apos;manufacturerModelName&apos;] !== &apos;undefined&apos;) {
					if(debug&gt;0) { logger.error(&apos;msg[assignedAuthor][assignedAuthoringDevice][manufacturerModelName]: &apos;+msg[&apos;assignedAuthor&apos;][&apos;assignedAuthoringDevice&apos;][&apos;manufacturerModelName&apos;].toString()); }
					objAssignedAuthor.assignedAuthorizingDevice_manufacturer= msg[&apos;assignedAuthor&apos;][&apos;assignedAuthoringDevice&apos;][&apos;manufacturerModelName&apos;].toString();
				} // end if 
				// get softwareName
				if(typeof msg[&apos;assignedAuthor&apos;][&apos;assignedAuthoringDevice&apos;][&apos;softwareName&apos;] !== &apos;undefined&apos;) {
					if(debug&gt;0) { logger.error(&apos;msg[assignedAuthor][assignedAuthoringDevice][softwareName]: &apos;+msg[&apos;assignedAuthor&apos;][&apos;assignedAuthoringDevice&apos;][&apos;softwareName&apos;].toString()); }
					objAssignedAuthor.assignedAuthorizingDevice_softwareName= msg[&apos;assignedAuthor&apos;][&apos;assignedAuthoringDevice&apos;][&apos;softwareName&apos;].toString();
				} // end if 
			} // end if 
			
			// set assignedAuthor representedOrganization
			/*  &lt;representedOrganization classCode=&quot;ORG&quot; determinerCode=&quot;INSTANCE&quot;&gt;&lt;id assigningAuthorityName=&quot;INLP_FIN&quot; extension=&quot;INLP&quot; root=&quot;2.16.840.1.113883.3.2139.200&quot;/&gt;&lt;id root=&quot;2.16.840.1.113883.3.2139&quot;/&gt;&lt;name&gt;La Porte Hospital&lt;/name&gt;
			*/

			if(debug&gt;0) { 
				logger.error(&apos;msg[assignedAuthor][representedOrganization]: &apos;+msg[&apos;assignedAuthor&apos;][&apos;representedOrganization&apos;]+
					&apos; typeof: &apos;+typeof msg[&apos;assignedAuthor&apos;][&apos;representedOrganization&apos;]+
					&apos; toString: &apos;+msg[&apos;assignedAuthor&apos;][&apos;representedOrganization&apos;].toString()+
					&apos; length: &apos;+msg[&apos;assignedAuthor&apos;][&apos;representedOrganization&apos;].toString().length); 
			}
			
			if(msg[&apos;assignedAuthor&apos;][&apos;representedOrganization&apos;].toString().length&gt;0) {
				if(typeof msg[&apos;assignedAuthor&apos;][&apos;representedOrganization&apos;][&apos;id&apos;] !== &apos;undefined&apos;) {
					// set representedOrganization Id assigningAuthorityName
					if(typeof msg[&apos;assignedAuthor&apos;][&apos;representedOrganization&apos;][&apos;id&apos;][&apos;@assigningAuthorityName&apos;] !== &apos;undefined&apos;) {
						if(debug&gt;0) { logger.error(&apos;msg[assignedAuthor][representedOrganization][id][@assigningAuthorityName]: &apos;+msg[&apos;assignedAuthor&apos;][&apos;representedOrganization&apos;][&apos;id&apos;][&apos;@assigningAuthorityName&apos;].toString()); }
						objAssignedAuthor.representedOrganization_assigningAuthorityName= msg[&apos;assignedAuthor&apos;][&apos;representedOrganization&apos;][&apos;id&apos;][&apos;@assigningAuthorityName&apos;].toString();
					} // end if
					// set representedOrganization Id extension
					if(typeof msg[&apos;assignedAuthor&apos;][&apos;representedOrganization&apos;][&apos;id&apos;][0][&apos;@extension&apos;] !== &apos;undefined&apos;) {
						if(debug&gt;0) { logger.error(&apos;msg[assignedAuthor][representedOrganization][id][@extension]: &apos;+msg[&apos;assignedAuthor&apos;][&apos;representedOrganization&apos;][&apos;id&apos;][0][&apos;@extension&apos;].toString()); }
						objAssignedAuthor.representedOrganization_extension= msg[&apos;assignedAuthor&apos;][&apos;representedOrganization&apos;][&apos;id&apos;][0][&apos;@extension&apos;].toString();
					} // end if
					// set representedOrganization Id root
					if(typeof msg[&apos;assignedAuthor&apos;][&apos;representedOrganization&apos;][&apos;id&apos;][0][&apos;@root&apos;] !== &apos;undefined&apos;) {
						if(debug&gt;0) { logger.error(&apos;msg[assignedAuthor][representedOrganization][id][@root]: &apos;+msg[&apos;assignedAuthor&apos;][&apos;representedOrganization&apos;][&apos;id&apos;][0][&apos;@root&apos;].toString()); }
						objAssignedAuthor.representedOrganization_root= msg[&apos;assignedAuthor&apos;][&apos;representedOrganization&apos;][&apos;id&apos;][0][&apos;@root&apos;].toString();
					} // end if
				} // end if 
			} // end if
				
			// check for assignedAuthor representedOrganization name child element
			if(typeof msg[&apos;assignedAuthor&apos;][&apos;representedOrganization&apos;][&apos;name&apos;] !== &apos;undefined&apos;) {
				if(msg[&apos;assignedAuthor&apos;][&apos;representedOrganization&apos;][&apos;name&apos;].toString().length&gt;0) {
					if(debug&gt;0) { logger.error(&apos;msg[assignedAuthor][representedOrganization][name]: &apos;+msg[&apos;assignedAuthor&apos;][&apos;representedOrganization&apos;][&apos;name&apos;].toString()); }
					objAssignedAuthor.representedOrganizationName= msg[&apos;assignedAuthor&apos;][&apos;representedOrganization&apos;][&apos;name&apos;].toString();	// Walgreens Drug Store 12562
				} else if (msg[&apos;assignedAuthor&apos;][&apos;assignedPerson&apos;][&apos;name&apos;].toString().length&gt;0) {
					if(debug&gt;0) { logger.error(&apos;msg[assignedAuthor][assignedPerson][name]: &apos;+msg[&apos;assignedAuthor&apos;][&apos;assignedPerson&apos;][&apos;name&apos;].toString()); }
					objAssignedAuthor.representedOrganizationName= msg[&apos;assignedAuthor&apos;][&apos;assignedPerson&apos;][&apos;name&apos;].toString();	// Walgreens Drug Store 12562
				} // end if
			} // end if 
		} // end if
	} // end if 
	return objAssignedAuthor;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.5.1">
            <id>ee2d85ee-4285-4f11-9947-e1a96874d3f5</id>
            <name>getAssignedEntity</name>
            <revision>29</revision>
            <lastModified>
              <time>1524433683434</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/** getAssignedEntity(msg)

  	- Desc: This function receives CCD assignedEntity XML Object and returns JavaScript object
  	- Modified 	
	2018-04-22 16:43 CT JER - Modified to include the storing of the id.root element.attribute for reference purposes
	2018-04-15 23:42 CT JER - Modified to include additional if no value or sizeable value handling (length()&gt;1, length= 1 and the else) for givenName element value.
	2018-02-16 17:48 CT JER - Added the assignedPerson Name suffix and the representedOrganization Name

   	@param {XML} msg - this contains the raw message (string)
	@return {object} objAssignedEntity - contains objAssignedEntity JS object and related properties.
*/

function getAssignedEntity(msg) {

	var debug= 0;
	var objAssignedEntity= new Object;
	default xml namespace = &apos;urn:hl7-org:v3&apos;;
	// &lt;given xmlns=&quot;urn:hl7-org:v3&quot;&gt;Julius&lt;/given&gt;&lt;given xmlns=&quot;urn:hl7-org:v3&quot;&gt;R&lt;/given&gt;
	
	if(typeof msg[&apos;assignedEntity&apos;] !== &apos;undefined&apos;) {
		if(msg[&apos;assignedEntity&apos;].children().length()&gt;0) {
			
			// set assignedEntity classCode
			if(typeof msg[&apos;assignedEntity&apos;][&apos;@classCode&apos;] !== &apos;undefined&apos;) {
				if(debug&gt;0) { logger.error(&apos;msg[assignedEntity][@classCode]: &apos;+msg[&apos;assignedEntity&apos;][&apos;@classCode&apos;].toString()); }
				objAssignedEntity.classCode= msg[&apos;assignedEntity&apos;][&apos;@classCode&apos;].toString();
			} // end if
			
			// set assignedEntity Id
			if(typeof msg[&apos;assignedEntity&apos;][&apos;id&apos;][0] !== &apos;undefined&apos;) {
				// set assignedEntity Id assigningAuthorityName
				if(typeof msg[&apos;assignedEntity&apos;][&apos;id&apos;][0][&apos;@assigningAuthorityName&apos;] !== &apos;undefined&apos;) {
					if(debug&gt;0) { logger.error(&apos;msg[assignedEntity][id][0][@assigningAuthorityName]: &apos;+msg[&apos;assignedEntity&apos;][&apos;id&apos;][0][&apos;@assigningAuthorityName&apos;].toString()); }
					objAssignedEntity.assigningAuthorityName= msg[&apos;assignedEntity&apos;][&apos;id&apos;][0][&apos;@assigningAuthorityName&apos;].toString();
				} // end if
				// set assignedEntity Id root
				if(typeof msg[&apos;assignedEntity&apos;][&apos;id&apos;][0][&apos;@root&apos;] !== &apos;undefined&apos;) {
					if(debug&gt;0) { logger.error(&apos;msg[assignedEntity][id][0][@root]: &apos;+msg[&apos;assignedEntity&apos;][&apos;id&apos;][0][&apos;@root&apos;].toString()); }
					objAssignedEntity.root= msg[&apos;assignedEntity&apos;][&apos;id&apos;][0][&apos;@root&apos;].toString();
				} // end if
				// set assignedEntity Id extension
				if(typeof msg[&apos;assignedEntity&apos;][&apos;id&apos;][0][&apos;@extension&apos;] !== &apos;undefined&apos;) {
					if(debug&gt;0) { logger.error(&apos;msg[assignedEntity][id][0][@extension]: &apos;+msg[&apos;assignedEntity&apos;][&apos;id&apos;][0][&apos;@extension&apos;].toString()); }
					objAssignedEntity.extension= msg[&apos;assignedEntity&apos;][&apos;id&apos;][0][&apos;@extension&apos;].toString();
				} // end if
			} // end if
			
			// set assignedEntity Code
			if(typeof msg[&apos;assignedEntity&apos;][&apos;code&apos;] !== &apos;undefined&apos;) {
				// set assignedEntity code code
				if(typeof msg[&apos;assignedEntity&apos;][&apos;code&apos;][&apos;@code&apos;] !== &apos;undefined&apos;) {
					if(debug&gt;0) { logger.error(&apos;msg[assignedEntity][code][@code]: &apos;+msg[&apos;assignedEntity&apos;][&apos;code&apos;][&apos;@code&apos;].toString()); }
					objAssignedEntity.code= msg[&apos;assignedEntity&apos;][&apos;code&apos;][&apos;@code&apos;].toString();
				} // end if
				// set assignedEntity code codeSystemOid
				if(typeof msg[&apos;assignedEntity&apos;][&apos;code&apos;][&apos;@codeSystem&apos;] !== &apos;undefined&apos;) {
					if(debug&gt;0) { logger.error(&apos;msg[assignedEntity][code][@codeSystem]: &apos;+msg[&apos;assignedEntity&apos;][&apos;code&apos;][&apos;@codeSystem&apos;].toString()); }
					objAssignedEntity.codeSystem= msg[&apos;assignedEntity&apos;][&apos;code&apos;][&apos;@codeSystem&apos;].toString();
				} // end if
				// set assignedEntity code codeSystemName
				if(typeof msg[&apos;assignedEntity&apos;][&apos;code&apos;][&apos;@codeSystemName&apos;] !== &apos;undefined&apos;) {
					if(debug&gt;0) { logger.error(&apos;msg[assignedEntity][code][@codeSystemName]: &apos;+msg[&apos;assignedEntity&apos;][&apos;code&apos;][&apos;@codeSystemName&apos;].toString()); }
					objAssignedEntity.codeSystemName= msg[&apos;assignedEntity&apos;][&apos;code&apos;][&apos;@codeSystemName&apos;].toString();
				} // end if
				// set assignedEntity code displayName
				if(typeof msg[&apos;assignedEntity&apos;][&apos;code&apos;][&apos;@displayName&apos;] !== &apos;undefined&apos;) {
					if(debug&gt;0) { logger.error(&apos;msg[assignedEntity][code][@displayName]: &apos;+msg[&apos;assignedEntity&apos;][&apos;code&apos;][&apos;@displayName&apos;].toString()); }
					objAssignedEntity.codeDisplayName= msg[&apos;assignedEntity&apos;][&apos;code&apos;][&apos;@displayName&apos;].toString();
				} // end if
			} // end if

		
			// set assignedEntity assignedPerson name
			if(typeof msg[&apos;assignedEntity&apos;][&apos;assignedPerson&apos;] !== &apos;undefined&apos;) {
				if(debug&gt;0) { 
					logger.error(&apos;toXMLString msg[assignedEntity][assignedPerson][name][given]: &apos;+msg[&apos;assignedEntity&apos;][&apos;assignedPerson&apos;][&apos;name&apos;][&apos;given&apos;].toXMLString()+
					&apos;msg[assignedEntity][assignedPerson][name][given]: &apos;+msg[&apos;assignedEntity&apos;][&apos;assignedPerson&apos;][&apos;name&apos;][&apos;given&apos;].toString()+
					&apos; typeof: &apos;+typeof msg[&apos;assignedEntity&apos;][&apos;assignedPerson&apos;][&apos;name&apos;][&apos;given&apos;]+
					&apos; length: &apos;+msg[&apos;assignedEntity&apos;][&apos;assignedPerson&apos;][&apos;name&apos;][&apos;given&apos;].length()
					);
				}
				if(typeof msg[&apos;assignedEntity&apos;][&apos;assignedPerson&apos;][&apos;name&apos;] !== &apos;undefined&apos;) {
					// get assignedEntity Given name	
					if((typeof msg[&apos;assignedEntity&apos;][&apos;assignedPerson&apos;][&apos;name&apos;][&apos;given&apos;] !== &apos;undefined&apos;)||(msg[&apos;assignedEntity&apos;][&apos;assignedPerson&apos;][&apos;name&apos;][&apos;given&apos;].toString().length&gt;0)) {	
						if(debug&gt;0) { 
							logger.error(&apos;msg[assignedEntity][assignedPerson][name][given]: &apos;+msg[&apos;assignedEntity&apos;][&apos;assignedPerson&apos;][&apos;name&apos;][&apos;given&apos;][0].toString()); 
						} // end if 
						if(msg[&apos;assignedEntity&apos;][&apos;assignedPerson&apos;][&apos;name&apos;][&apos;given&apos;].length()&gt;1) {
							objAssignedEntity.givenName= msg[&apos;assignedEntity&apos;][&apos;assignedPerson&apos;][&apos;name&apos;][&apos;given&apos;][0].toString();
						} else if(msg[&apos;assignedEntity&apos;][&apos;assignedPerson&apos;][&apos;name&apos;][&apos;given&apos;].length()== 1) {
							objAssignedEntity.givenName= msg[&apos;assignedEntity&apos;][&apos;assignedPerson&apos;][&apos;name&apos;][&apos;given&apos;].toString();
						} else {
							objAssignedEntity.givenName= &apos;&apos;;
						} // end if 
					} // end if 
					// get assignedEntity Family name	
					if((typeof msg[&apos;assignedEntity&apos;][&apos;assignedPerson&apos;][&apos;name&apos;][&apos;family&apos;] !== &apos;undefined&apos;)||(msg[&apos;assignedEntity&apos;][&apos;assignedPerson&apos;][&apos;name&apos;][&apos;family&apos;].length&gt;0)) {	
						if(debug&gt;0) { logger.error(&apos;msg[assignedEntity][assignedPerson][name][family]: &apos;+msg[&apos;assignedEntity&apos;][&apos;assignedPerson&apos;][&apos;name&apos;][&apos;family&apos;].toString().replace(/xmlns=\&quot;(.*?)\&quot;/g, &apos;&apos;)); }
						objAssignedEntity.familyName= msg[&apos;assignedEntity&apos;][&apos;assignedPerson&apos;][&apos;name&apos;][&apos;family&apos;].toString().replace(/xmlns=\&quot;(.*?)\&quot;/g, &apos;&apos;);
					} // end if
					// get assignedEntity Suffix
					if(debug&gt;0) { logger.error(&apos;getAssignedEntity msg[assignedEntity][assignedPerson][name][suffix]: &apos;+msg[&apos;assignedEntity&apos;][&apos;assignedPerson&apos;][&apos;name&apos;][&apos;suffix&apos;]+
						&apos; typeof: &apos;+typeof msg[&apos;assignedEntity&apos;][&apos;assignedPerson&apos;][&apos;name&apos;][&apos;suffix&apos;]+
						&apos; length: &apos;+msg[&apos;assignedEntity&apos;][&apos;assignedPerson&apos;][&apos;name&apos;][&apos;suffix&apos;].toString().length);
					} // end if logger.error
					if((typeof msg[&apos;assignedEntity&apos;][&apos;assignedPerson&apos;][&apos;name&apos;][&apos;suffix&apos;] !== &apos;undefined&apos;)||(msg[&apos;assignedEntity&apos;][&apos;assignedPerson&apos;][&apos;name&apos;][&apos;suffix&apos;].toString().length&gt;0)) {	
						if(debug&gt;0) { logger.error(&apos;msg[assignedEntity][assignedPerson][name][suffix]: &apos;+msg[&apos;assignedEntity&apos;][&apos;assignedPerson&apos;][&apos;name&apos;][&apos;suffix&apos;].toString()); }
						objAssignedEntity.suffix= msg[&apos;assignedEntity&apos;][&apos;assignedPerson&apos;][&apos;name&apos;][&apos;suffix&apos;].toString();
					} // end if 
				} // end if 
			} // end if 
			
			// set assignedEntity representedOrganization
			if(typeof msg[&apos;assignedEntity&apos;][&apos;representedOrganization&apos;] !== &apos;undefined&apos;) {
				// check for assignedEntity representedOrganization name child element
				if(typeof msg[&apos;assignedEntity&apos;][&apos;representedOrganization&apos;][&apos;name&apos;] !== &apos;undefined&apos;) {
					if(debug&gt;0) { logger.error(&apos;msg[assignedEntity][representedOrganization][name]: &apos;+msg[&apos;assignedEntity&apos;][&apos;representedOrganization&apos;][&apos;name&apos;].toString()); }
					objAssignedEntity.representedOrganizationName= msg[&apos;assignedEntity&apos;][&apos;representedOrganization&apos;][&apos;name&apos;].toString();	// Walgreens Drug Store 12562
				} // end if
				
				if(typeof msg[&apos;assignedEntity&apos;][&apos;representedOrganization&apos;][&apos;id&apos;] !== &apos;undefined&apos;) {
					if(typeof msg[&apos;assignedEntity&apos;][&apos;representedOrganization&apos;][&apos;id&apos;][&apos;root&apos;] !== &apos;undefined&apos;) {
						if(debug&gt;0) { logger.error(&apos;msg[assignedEntity][representedOrganization][id][root]: &apos;+msg[&apos;assignedEntity&apos;][&apos;representedOrganization&apos;][&apos;id&apos;][&apos;root&apos;].toString()); }
						objAssignedEntity.representedOrganizationIdRoot= msg[&apos;assignedEntity&apos;][&apos;representedOrganization&apos;][&apos;id&apos;][&apos;root&apos;].toString();	// 12562
					} // end if 
				} // end if
			} // end if
		} // end if
	} // end if 
	return objAssignedEntity;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.5.1">
            <id>e2cc3ab2-6619-43f6-b77e-bb2f56a8670f</id>
            <name>getAuthorPerson</name>
            <revision>45</revision>
            <lastModified>
              <time>1519632777197</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/** getAuthorPerson(object)

  	- Desc: This function receives Javascript Object and returns AuthorPerson string
  	- Modified:
	2018-02-18 10:12 CT JER - Modified to accommodate the changes to the objAssignedEntity
  	2018-02-16 10:40 CT JER - Removed the objAuthor instances reference and left the references specific to JS Rhino XPath
  	2018-02-15 16:01 CT JER - Modified included additional typeof and for each object

   	@param {object} objAuthor - this contains the Javascript Object (object)
	@return {string} strAuthorPerson - contains authorPerson string containing the required HL7.Composite.XCN datatype and related properties.
	
	[2018-02-18 10:11:47,629]  ERROR (transformer:?): objAuthor= ({assigningAuthorityName:&quot;INLP_FIN&quot;, extension:&quot;3100004118&quot;, root:&quot;2.16.840.1.113883.3.2139.200&quot;, startTime:&quot;20180208041500&quot;, stopTime:&quot;20180208075000&quot;, dispositionCode:&quot;&quot;, dispositionCodeSystemOid:&quot;&quot;, dispositionCodeSystemName:&quot;&quot;, dispositionDisplayName:&quot;Home or Self Care&quot;, encounterParticipant_code:&quot;ATND&quot;, assignedEntity_root:&quot;2.16.840.1.113883.3.2139.300&quot;, assignedEntity_extension:&quot;8284&quot;, assignedEntity_assigningAuthorityName:&quot;LPS_ORG_DOC&quot;, assignedEntity_code:&quot;&quot;, assignedEntity_codeSystem:&quot;&quot;, assignedEntity_codeSystemName:&quot;&quot;, assignedEntity_codeDisplayName:&quot;&quot;, assignedEntity_givenName:&quot;Robert&quot;, assignedEntity_familyName:&quot;Riggs&quot;})
	
*/

function getAuthorPerson(objAuthor) {

	var debug= 0;
	var cntObject= 0;
	var strAuthorPerson= &apos;&apos;;
	if(debug&gt;0) { 
		logger.error(&quot;getAuthorPerson objAuthor= &quot;+objAuthor.toSource()); 
		// logger.error(&quot;objAuthor JSON= &quot;+JSON.stringify(objAuthor, null, 4));
	}

	if(typeof objAuthor !== &apos;undefined&apos;) {	
	
		// replaced the assignedId with assignedEntity_extension
		if(typeof objAuthor.assignedEntity_extension !== &apos;undefined&apos;) {
			if(objAuthor.assignedEntity_extension.toString().length&gt;0) {
				if(debug&gt;0) { logger.error(&apos;objAuthor.assignedEntity_extension: &apos;+objAuthor.assignedEntity_extension.toString()); }
				strAuthorPerson += objAuthor.assignedEntity_extension.toString();
			} // end if 
		} // end if 

	
		// replaced the assignedPersonLastName with assignedEntity_familyName
		if(typeof objAuthor.assignedEntity_familyName !== &apos;undefined&apos;) {
			if(debug&gt;0) { logger.error(&apos;objAuthor.assignedEntity_familyName: &apos;+objAuthor.assignedEntity_familyName.toString()); }
			if(objAuthor.assignedEntity_familyName.toString().length&gt;0) {
				strAuthorPerson += &quot;^&quot;+objAuthor.assignedEntity_familyName.toString();
			} else {
				strAuthorPerson += &quot;^&quot;;
			} // end if 
		} // end if 
		// replaced the assignedPersonFirstName with assignedEntity_givenName
		if(typeof objAuthor.assignedEntity_givenName !== &apos;undefined&apos;) {
			// replace(/xmlns=\&quot;(.*?)\&quot;/g, &apos;&apos;) to remove namespaces
			// objAuthor.assignedEntity_givenName.toString().replace(/xmlns=\&quot;(.*?)\&quot;/g, &apos;&apos;)); }
			if(debug&gt;0) { 
				logger.error(&apos;objAuthor.assignedEntity_givenName: &apos;+objAuthor.assignedEntity_givenName.toString());
			} // end if 
			if(objAuthor.assignedEntity_givenName.toString().length&gt;0) {
				// strAuthorPerson += &quot;^&quot;+objAuthor.assignedEntity_givenName.toString().replace(/xmlns=\&quot;(.*?)\&quot;/g, &apos;&apos;);
				strAuthorPerson += &quot;^&quot;+objAuthor.assignedEntity_givenName;
			} else {
				strAuthorPerson += &quot;^&quot;;
			} // end if 
		} // end if

		 
		// replace the assignedPersonSuffix with assignedEntity_suffix
		if(typeof objAuthor.assignedEntity_suffix !== &apos;undefined&apos;) {
			if(debug&gt;0) { logger.error(&apos;objAuthor.assignedEntity_suffix: &apos;+objAuthor.assignedEntity_suffix.toString()); }
			if(objAuthor.assignedEntity_suffix.toString().length&gt;0) {
				strAuthorPerson += &quot;^^&quot;+objAuthor.assignedEntity_suffix.toString();
			} else {
				strAuthorPerson += &quot;^^&quot;;
			} // end if 
		} // end if 
		// replace the assignedRoot with assignedEntity_root
		if(typeof objAuthor.assignedEntity_root !== &apos;undefined&apos;) {
			if(debug&gt;0) { logger.error(&apos;objAuthor.assignedEntity_root: &apos;+objAuthor.assignedEntity_root.toString()); }
			if (objAuthor.assignedEntity_root.toString().length&gt;0) {
				strAuthorPerson += &quot;^^^^^&amp;amp;&quot;+objAuthor.assignedEntity_root.toString()+&quot;&amp;amp;ISO&quot;;
			} else {
				strAuthorPerson += &quot;^^^^^&quot;;
			} // end if
		} // end if
	} // end if 

	if(debug&gt;0) { logger.error(&quot;getAuthorPerson.strAuthorPerson: &quot;+strAuthorPerson); }
	return strAuthorPerson;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.5.1">
            <id>e7b0d95b-2bde-43e7-ab61-ea1572002360</id>
            <name>getAuthors</name>
            <revision>28</revision>
            <lastModified>
              <time>1519632777308</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/** getAuthors(msg)

	- Desc: This function receives CCD msg and returns an array of Author objects 
	- Modified
	2018-02-18 13:38 CT JER - Modified to accommodate the changes to call the objAssignedAuthor function
	2018-02-10 11:32 CT JER - Verified per the HL7 Rim model 1..* assignedAuthors elements (1..* more authors) list objects persist to arrAuthors.
	2018-02-08 03:58 CT JER - Modified for additional handling verify typeof !== &apos;undefined&apos; and two conditionals to set authorInstitution property
	
	@param {String} msg - Raw msg
	@return {Array} return array of Author objects
*/
function getAuthors(msg) {
	
	var debug= 0;
	// uncertain if more than one assignedAuthor per ClinicalDocument
	if(debug&gt;0) { logger.error(&apos;getAuthor of msg[author]: &apos;+msg[&apos;author&apos;]); }
	
	var objAuthor= new Object;			
	var objAssignedAuthor= getAssignedAuthor(msg[&apos;author&apos;]);

	if(typeof objAssignedAuthor !== &apos;undefined&apos;) {
	
		// get assigningAuthorityName
		if((typeof objAssignedAuthor.assigningAuthorityName !== &apos;undefined&apos;)&amp;&amp;(objAssignedAuthor.assigningAuthorityName.toString().length&gt;0)) {
			if(debug&gt;0) { logger.error(&apos;msg[author][assignedAuthor][id][@assigningAuthorityName]: &apos;+objAssignedAuthor.assigningAuthorityName.toString()); }
			objAuthor.IdAssigningAuthorityName= objAssignedAuthor.assigningAuthorityName.toString();
		} // end if
		// get root
		if((typeof objAssignedAuthor.root !== &apos;undefined&apos;)&amp;&amp;(objAssignedAuthor.root.toString().length&gt;0)) {
			if(debug&gt;0) { logger.error(&apos;msg[author][assignedAuthor][id][@root]: &apos;+objAssignedAuthor.root.toString()); }
			objAuthor.Idroot= objAssignedAuthor.root.toString();
		} // end if
		// get extension
		if((typeof objAssignedAuthor.extension !== &apos;undefined&apos;)&amp;&amp;(objAssignedAuthor.extension.toString().length&gt;0)) {
			if(debug&gt;0) { logger.error(&apos;msg[author][assignedAuthor][id][@extension]: &apos;+objAssignedAuthor.extension.toString()); }
			objAuthor.Idextension= objAssignedAuthor.extension.toString();
		} // end if			
	
		// get assignedAuthorizingDevice manufacturer -&gt; set manufacturer
		if((typeof objAssignedAuthor.assignedAuthorizingDevice_manufacturer !== &apos;undefined&apos;)&amp;&amp;(objAssignedAuthor.assignedAuthorizingDevice_manufacturer.toString().length&gt;0)) {
			if(debug&gt;0) { logger.error(&apos;msg[author][assignedAuthor][assignedAuthoringDevice][manufacturerModelName]: &apos;+objAssignedAuthor.assignedAuthorizingDevice_manufacturer.toString()); }
			objAuthor.authorizingDevice= objAssignedAuthor.assignedAuthorizingDevice_manufacturer.toString();
		} // end if			
	
		// get assignedAuthorizingDevice softwareName -&gt; set softwareName
		if((typeof objAssignedAuthor.assignedAuthorizingDevice_softwareName !== &apos;undefined&apos;)&amp;&amp;(objAssignedAuthor.assignedAuthorizingDevice_softwareName.toString().length&gt;0)) {
			if(debug&gt;0) { logger.error(&apos;msg[author][assignedAuthor][assignedAuthoringDevice][softwareName]: &apos;+objAssignedAuthor.assignedAuthorizingDevice_softwareName.toString()); }
			objAuthor.softwareName= objAssignedAuthor.assignedAuthorizingDevice_softwareName.toString();
		} // end if	
				
		// get objAssignedAuthor representedOrganization_assigningAuthorityName -&gt; set assigningAuthorityName
		if((typeof objAssignedAuthor.representedOrganization_assigningAuthorityName !== &apos;undefined&apos;)&amp;&amp;(objAssignedAuthor.representedOrganization_assigningAuthorityName.toString().length&gt;0)) {
			if(debug&gt;0) { logger.error(&apos;msg[author][assignedAuthor][representedOrganization][id][assigingAuthorityName]: &apos;+objAssignedAuthor.representedOrganization_assigningAuthorityName.toString()); }
			objAuthor.representedOrganization_assigingAuthorityName= objAssignedAuthor.representedOrganization_assigningAuthorityName.toString();
		} // end if				
	
		// get objAssignedAuthor representedOrganization_extension -&gt; set extension
		if((typeof objAssignedAuthor.representedOrganization_extension !== &apos;undefined&apos;)&amp;&amp;(objAssignedAuthor.representedOrganization_extension.toString().length&gt;0)) {
			if(debug&gt;0) { logger.error(&apos;msg[author][assignedAuthor][representedOrganization][id][extension]: &apos;+objAssignedAuthor.representedOrganization_extension.toString()); }
			objAuthor.representedOrganization_extension= objAssignedAuthor.representedOrganization_extension.toString();
		} // end if	
	
		// get objAssignedAuthor representedOrganization_root -&gt; set root
		if((typeof objAssignedAuthor.representedOrganization_root !== &apos;undefined&apos;)&amp;&amp;(objAssignedAuthor.representedOrganization_root.toString().length&gt;0)) {
			if(debug&gt;0) { logger.error(&apos;msg[author][assignedAuthor][representedOrganization][id][root]: &apos;+objAssignedAuthor.representedOrganization_root.toString()); }
			objAuthor.representedOrganization_root= objAssignedAuthor.representedOrganization_root.toString();
		} // end if
				
		// get objAssignedAuthor.representedOrganizationName -&gt; set representedOrganizationName
		if((typeof objAssignedAuthor.representedOrganizationName !== &apos;undefined&apos;)&amp;&amp;(objAssignedAuthor.representedOrganizationName.toString().length&gt;0)) {
			if(debug&gt;0) { logger.error(&apos;msg[author][assignedAuthor][representedOrganization][name]: &apos;+objAssignedAuthor.representedOrganizationName.toString()); }
			objAuthor.authorInstitution= objAssignedAuthor.representedOrganizationName.toString();
		} // end if
	} // end if 
	
	return objAuthor;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.5.1">
            <id>6fa24651-0c70-4d88-95b6-a50ba345cdfc</id>
            <name>getClinicalDocumentInfo</name>
            <revision>10</revision>
            <lastModified>
              <time>1518424049850</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/** getClinicalDocumentInfo(msg)

  	- Desc: This function receives CCD msg and returns clinicalDocumentInfo object
  	- Modified:
 	2018-02-10 11:20 CT JER - Modified to include capturing the SetId and versionNumber attributes

   	@param {String} msg - this contains the raw message (string)
	@return {object} objClinDocInfo - this contains a clinical document info element specific values composed into a single objClinDocInfo object.
*/
function getClinicalDocumentInfo(msg) {

		var objClinDocInfo= new Object();
		objClinDocInfo.extension=				msg[&apos;id&apos;][&apos;@extension&apos;].toString();
		objClinDocInfo.root=					msg[&apos;id&apos;][&apos;@root&apos;].toString();	
		objClinDocInfo.assigningAuthorityName=		msg[&apos;id&apos;][&apos;@assigningAuthorityName&apos;].toString();
		objClinDocInfo.code=					msg[&apos;code&apos;][&apos;@code&apos;].toString();
		objClinDocInfo.codeSystemOid=				msg[&apos;code&apos;][&apos;@codeSystem&apos;].toString();
		objClinDocInfo.codeSystemName=			msg[&apos;code&apos;][&apos;@codeSystemName&apos;].toString();
		objClinDocInfo.displayName=				msg[&apos;code&apos;][&apos;@displayName&apos;].toString();
		objClinDocInfo.title=					msg[&apos;title&apos;].toString();
		objClinDocInfo.creationTime=				msg[&apos;effectiveTime&apos;][&apos;@value&apos;].toString().substring(0,14);
		objClinDocInfo.confCode=					msg[&apos;confidentialityCode&apos;][&apos;@code&apos;].toString();
		objClinDocInfo.confCodeSystemOid=			msg[&apos;confidentialityCode&apos;][&apos;@codeSystem&apos;].toString();
		objClinDocInfo.languageCode=				msg[&apos;languageCode&apos;][&apos;@code&apos;].toString();
		objClinDocInfo.setIdExtension=			msg[&apos;setId&apos;][&apos;@extension&apos;].toString();
		objClinDocInfo.setIdRoot=				msg[&apos;setId&apos;][&apos;@root&apos;].toString();	
		objClinDocInfo.setIdAssigningAuthorityName=	msg[&apos;setId&apos;][&apos;@assigningAuthorityName&apos;].toString();
		objClinDocInfo.documentVersion=			msg[&apos;versionNumber&apos;][&apos;@value&apos;].toString();
		return objClinDocInfo;

}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.5.1">
            <id>70cd4591-c02c-43e3-8da1-b6c7f3debd3b</id>
            <name>getCustodian</name>
            <revision>10</revision>
            <lastModified>
              <time>1524413710013</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/** getCustodian(msg)

	- Desc: This function receives CCD msg and returns an array of custodian objects 
	- Modified
	2018-02-11 17:49 CT JER - Newly created to store the custodian objects

	@param {String} msg - Raw msg
	@return {Array} return array of custodian objects
*/
function getCustodian(msg) {
	
	var debug= 0;
	var objCounter= 1;
	var arrCustodian= new Array();

	// uncertain if more than one assignedCustodians per ClinicalDocument
	for each(custodian in msg[&apos;custodian&apos;][0]) {
		var objCustodian= new Object;
		objCustodian.id= objCounter;
		if(custodian.children().length()&gt;0) {
			if(debug&gt;0) { logger.error(&apos;custodian children()= &apos;+custodian.children()); }
			for each(child in custodian.children()) {
				// each assignedCustodian
				if(child.localName()== &apos;assignedCustodian&apos;) {
					// &lt;id assigningAuthorityName=&quot;HMS HOSPITAL NUMBER&quot; extension=&quot;134&quot; root=&quot;2.16.840.1.113883.3.1579.834848495152.134.500&quot;/&gt;
					if(typeof child.representedCustodianOrganization.id !== &apos;undefined&apos;) {
						objCustodian.representedOrganization_AssignAuthorityName=	child.representedCustodianOrganization.id.@assigningAuthorityName.toString();
						objCustodian.representedOrganization_Extension=  			child.representedCustodianOrganization.id.@extension.toString();
						objCustodian.representedOrganization_Root=  				child.representedCustodianOrganization.id.@root.toString();
					} // end if
					// e.g &lt;name&gt;HILL REGIONAL HOSPITAL&lt;/name&gt;
					if(typeof child.representedOrganziation.name !== &apos;undefined&apos;) {
						objCustodian.representedOrganization=					child.representedCustodianOrganization.name.toString();
					}
					// &lt;telecom use=&quot;WP&quot; value=&quot;tel:(254)580-8500&quot;/&gt;
					if(typeof child.representedOrganziation.telecom !== &apos;undefined&apos;) {
						objCustodian.representedOrganization_telecom=			child.representedCustodianOrganization.telecom.@value.toString();
					}
					// &lt;addr use=&quot;WP&quot;&gt;&lt;streetAddressLine&gt;101 CIRCLE DRIVE&lt;/streetAddressLine&gt;&lt;city&gt;HILLSBORO&lt;/city&gt;&lt;state&gt;TX&lt;/state&gt;&lt;postalCode&gt;766450000&lt;/postalCode&gt;&lt;/addr&gt;
					if(typeof child.representedOrganziation.addr !== &apos;undefined&apos;) {
						objCustodian.representedOrganization_streetAddress=				child.representedCustodianOrganization.addr.streetAddressLine.toString();
						objCustodian.representedOrganization_city=						child.representedCustodianOrganization.addr.city.toString();
						objCustodian.representedOrganization_state=						child.representedCustodianOrganization.addr.state.toString();
						objCustodian.representedOrganization_postalCode=					child.representedCustodianOrganization.addr.postalCode.toString();
					} // end if
				}
			} // end for each
		} // end if 
		objCounter++;
	} // end for each
	arrCustodian.push(objCustodian);

	return arrCustodian;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.5.1">
            <id>b0e1a23f-7003-4f27-a819-985f89f80e87</id>
            <name>getEncounter</name>
            <revision>11</revision>
            <lastModified>
              <time>1519009928864</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/** getEncounter(msg)

  	- Desc: This function receives CCD msg and returns Encounter object
  	- Modified
  	2018-02-18 20:23 CT JER - Modified to include the addition of healthcareFacility Location Name - use for HealthcareFacilityTypeCode displayName
  	2018-02-16 17:33 CT JER - Added association to the getAssignedEntity to retrieve the assignedEntity related elements and attributes
  	2018-02-16 15:55 CT JER - Added handling for DischargeDisposition elements and attributes
  	2018-02-11 17:34 CT JER - Modified startTime and stopTime by applying the substring(0,14) function to remove the datetime offset
  	2018-02-10 11:27 CT JER - Corrected the setting of the objEncounter extension, root, startTime and stopTime
  	

   	@param {String} msg - this contains the raw message (string)
	@return {object} objEncounter - contains objEncounter object and related properties.
*/

function getEncounter(msg) {

var debug= 0;

	if(typeof msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;] !== &apos;undefined&apos;) {
		if(msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;].children().length()&gt;0) {
			var objEncounter= new Object;
			
			// &lt;id assigningAuthorityName=&quot;HMS PATIENT ACCOUNT NUMBER&quot; extension=&quot;3480487&quot; root=&quot;2.16.840.1.113883.3.1579.834848495152.134.300&quot;/&gt;
			if(typeof msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;id&apos;] !== &apos;undefined&apos;) {
				if(typeof msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;id&apos;][&apos;@assigningAuthorityName&apos;] !== &apos;undefined&apos;) {
					if(debug&gt;0) { logger.error(&apos;msg[componentOf][encompassingEncounter][id][@assigningAuthorityName]: &apos;+msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;id&apos;][&apos;@assigningAuthorityName&apos;].toString()); }
					objEncounter.assigningAuthorityName= msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;id&apos;][&apos;@assigningAuthorityName&apos;].toString();
				} // end if
				if(typeof msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;id&apos;][&apos;@extension&apos;] !== &apos;undefined&apos;) {
					if(debug&gt;0) { logger.error(&apos;msg[componentOf][encompassingEncounter][id][@extension]: &apos;+msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;id&apos;][&apos;@extension&apos;].toString()); }
					objEncounter.extension= msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;id&apos;][&apos;@extension&apos;].toString();
				} // end if
				if(typeof msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;id&apos;][&apos;@root&apos;] !== &apos;undefined&apos;) {
					if(debug&gt;0) { logger.error(&apos;msg[componentOf][encompassingEncounter][id][@root]: &apos;+msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;id&apos;][&apos;@root&apos;].toString()); }
					objEncounter.root= msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;id&apos;][&apos;@root&apos;].toString();
				} // end if
			} // end if
			
			// &lt;effectiveTime&gt;&lt;low value=&quot;20180203075200-0600&quot;/&gt;&lt;high value=&quot;20180203075200-0600&quot;/&gt;&lt;/effectiveTime&gt;
			if(typeof msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;effectiveTime&apos;] !== &apos;undefined&apos;) {
				if(typeof msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;effectiveTime&apos;][&apos;low&apos;][&apos;@value&apos;] !== &apos;undefined&apos;) {
					if(debug&gt;0) { logger.error(&apos;msg[componentOf][encompassingEncounter][effectiveTime][low][@value]: &apos;+msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;effectiveTime&apos;][&apos;low&apos;][&apos;@value&apos;].toString()); }
					objEncounter.startTime= msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;effectiveTime&apos;][&apos;low&apos;][&apos;@value&apos;].toString().substring(0,14);
				} // end if
				if(typeof msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;effectiveTime&apos;][&apos;high&apos;][&apos;@value&apos;] !== &apos;undefined&apos;) {
					if(debug&gt;0) { logger.error(&apos;msg[componentOf][encompassingEncounter][effectiveTime][high][@value]: &apos;+msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;effectiveTime&apos;][&apos;high&apos;][&apos;@value&apos;].toString()); }
					objEncounter.stopTime= msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;effectiveTime&apos;][&apos;high&apos;][&apos;@value&apos;].toString().substring(0,14);
				} // end if
			} // end if
			
			//  &lt;dischargeDispositionCode code=&quot;1&quot; codeSystem=&quot;2.16.840.1.113883.12.112&quot; codeSystemName=&quot;HL7 Discharge Disposition&quot; displayName=&quot;DISCHARGED HOME/SELF CARE&quot;/&gt;
			if(typeof msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;dischargeDispositionCode&apos;] !== &apos;undefined&apos;) {
				if(typeof msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;dischargeDispositionCode&apos;][&apos;@code&apos;] !== &apos;undefined&apos;) {
					// get DischargeDisposition Code
					if(typeof msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;dischargeDispositionCode&apos;][&apos;@code&apos;] !== &apos;undefined&apos;) {&#xd;						if(debug&gt;0) { logger.error(&apos;msg[componentOf][encompassingEncounter][dischargeDispositionCode][@code]: &apos;+msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;dischargeDispositionCode&apos;][&apos;@code&apos;].toString()); }
						objEncounter.dispositionCode= msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;dischargeDispositionCode&apos;][&apos;@code&apos;].toString();
					} // end if
					// get DischargeDisposition CodeSystemOid
					if(typeof msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;dischargeDispositionCode&apos;][&apos;@codeSystem&apos;] !== &apos;undefined&apos;) {
						if(debug&gt;0) { logger.error(&apos;msg[componentOf][encompassingEncounter][dischargeDispositionCode][@codeSystem]: &apos;+msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;dischargeDispositionCode&apos;][&apos;@codeSystem&apos;].toString()); }
						objEncounter.dispositionCodeSystemOid= msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;dischargeDispositionCode&apos;][&apos;@codeSystem&apos;].toString();
					} // end if
					// get DischargeDisposition CodeSystemName
					if(typeof msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;dischargeDispositionCode&apos;][&apos;@codeSystemName&apos;] !== &apos;undefined&apos;) {
						if(debug&gt;0) { logger.error(&apos;msg[componentOf][encompassingEncounter][dischargeDispositionCode][@codeSystemName]: &apos;+msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;dischargeDispositionCode&apos;][&apos;@codeSystemName&apos;].toString()); }						
						objEncounter.dispositionCodeSystemName= msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;dischargeDispositionCode&apos;][&apos;@codeSystemName&apos;].toString();
					} // end if
					// get DischargeDisposition DisplayName
					if(typeof msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;dischargeDispositionCode&apos;][&apos;@displayName&apos;] !== &apos;undefined&apos;) {
						if(debug&gt;0) { logger.error(&apos;msg[componentOf][encompassingEncounter][dischargeDispositionCode][@displayName]: &apos;+msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;dischargeDispositionCode&apos;][&apos;@displayName&apos;].toString()); }
						objEncounter.dispositionDisplayName= msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;dischargeDispositionCode&apos;][&apos;@displayName&apos;].toString();
					} // end if
				} // end if 
				// get DischargeDisposition originalText
				if(typeof msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;dischargeDispositionCode&apos;][&apos;originalText&apos;] !== &apos;undefined&apos;) {
					if(debug&gt;0) { logger.error(&apos;msg[componentOf][encompassingEncounter][dischargeDispositionCode][originalText]: &apos;+msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;dischargeDispositionCode&apos;][&apos;originalText&apos;].toString()); }
					objEncounter.dispositionDisplayName= msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;dischargeDispositionCode&apos;][&apos;originalText&apos;].toString();
				} // end if 
			} // end if 	
				
			// get encounterParticipant assignedEntity
			if(typeof msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;encounterParticipant&apos;] !== &apos;undefined&apos;) {
					
				if(typeof msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;encounterParticipant&apos;][&apos;@typeCode&apos;] !== &apos;undefined&apos;) {
					if(debug&gt;0) { logger.error(&apos;msg[componentOf][encompassingEncounter][encounterParticipant][@typeCode]: &apos;+msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;encounterParticipant&apos;][&apos;@typeCode&apos;].toString()); }
					objEncounter.encounterParticipant_code= msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;encounterParticipant&apos;][&apos;@typeCode&apos;].toString();
				} // end if
				
				// call getAssignedEntity
				var objAssignedEntity= getAssignedEntity(msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;encounterParticipant&apos;]);
				if(objAssignedEntity !== &apos;undefined&apos;) {
				
					// get assignedEntity Root
					if(objAssignedEntity.root != null) {
						if(debug&gt;0) { logger.error(&apos;msg[componentOf][encompassingEncounter][encounterParticipant][assignedEntity][id][@root]: &apos;+objAssignedEntity.root.toString()); }
						objEncounter.assignedEntity_root= objAssignedEntity.root.toString();
					} // end if
					// get assignedEntity Extension
					if(objAssignedEntity.extension != null) {
						if(debug&gt;0) { logger.error(&apos;msg[componentOf][encompassingEncounter][encounterParticipant][assignedEntity][id][@extension]: &apos;+objAssignedEntity.extension.toString()); }
						objEncounter.assignedEntity_extension= objAssignedEntity.extension.toString();
					} // end if
					// get assignedEntity AssigningAuthorityName
					if(objAssignedEntity.assigningAuthorityName != null) {
						if(debug&gt;0) { logger.error(&apos;msg[componentOf][encompassingEncounter][encounterParticipant][assignedEntity][id][@assigningAuthorityName]: &apos;+objAssignedEntity.assigningAuthorityName.toString()); }
						objEncounter.assignedEntity_assigningAuthorityName= objAssignedEntity.assigningAuthorityName.toString();
					} // end if
					
					// get assignedEntity code
					if(objAssignedEntity.code != null) {
						if(debug&gt;0) { logger.error(&apos;msg[componentOf][encompassingEncounter][encounterParticipant][assignedEntity][code][@code]: &apos;+objAssignedEntity.code.toString()); }
						objEncounter.assignedEntity_code= objAssignedEntity.code.toString();
					} // end if
					// get assignedEntity codeSystem
					if(objAssignedEntity.codeSystem != null) {
						if(debug&gt;0) { logger.error(&apos;msg[componentOf][encompassingEncounter][encounterParticipant][assignedEntity][code][@codeSystem]: &apos;+objAssignedEntity.codeSystem.toString()); }
						objEncounter.assignedEntity_codeSystem= objAssignedEntity.codeSystem.toString();
					} // end if
					// get assignedEntity codeSystemName
					if(objAssignedEntity.codeSystemName != null) {
						if(debug&gt;0) { logger.error(&apos;msg[componentOf][encompassingEncounter][encounterParticipant][assignedEntity][code][@codeSystemName]: &apos;+objAssignedEntity.codeSystemName.toString()); }
						objEncounter.assignedEntity_codeSystemName= objAssignedEntity.codeSystemName.toString();
					} // end if
					// get assignedEntity displayName
					if(objAssignedEntity.codeDisplayName != null) {
						if(debug&gt;0) { logger.error(&apos;msg[componentOf][encompassingEncounter][encounterParticipant][assignedEntity][code][@displayName]: &apos;+objAssignedEntity.codeDisplayName.toString()); }
						objEncounter.assignedEntity_codeDisplayName= objAssignedEntity.codeDisplayName.toString();
					} // end if

					// get assignedEntity Author GivenName
					if(objAssignedEntity.givenName != null) {
						if(debug&gt;0) { logger.error(&apos;msg[componentOf][encompassingEncounter][encounterParticipant][assignedEntity][assignedPerson][name][@given]: &apos;+objAssignedEntity.givenName.toString()); }
						objEncounter.assignedEntity_givenName= objAssignedEntity.givenName.toString();
					} // end if
					// get assignedEntity Author FamilyName
					if(objAssignedEntity.familyName != null) {
						if(debug&gt;0) { logger.error(&apos;msg[componentOf][encompassingEncounter][encounterParticipant][assignedEntity][assignedPerson][name][@family]: &apos;+objAssignedEntity.familyName.toString()); }
						objEncounter.assignedEntity_familyName= objAssignedEntity.familyName.toString();
					} // end if					
				} // end if 
			} // end if 
			
			// get HealthcareFacilityTypeCode
			if(typeof msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;location&apos;][&apos;healthCareFacility&apos;] !== &apos;undefined&apos;) {
	
				// set healthcareFacility classCode
				if(typeof msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;location&apos;][&apos;healthcareFacility&apos;][&apos;@classCode&apos;] !== &apos;undefined&apos;) {
					if((typeof msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;location&apos;][&apos;healthcareFacility&apos;][&apos;@classCode&apos;] != null)&amp;&amp;(msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;location&apos;][&apos;healthcareFacility&apos;][&apos;@classCode&apos;].toString().length&gt;0)) {
						if(debug&gt;0) { logger.error(&apos;msg[componentOf][encompassingEncounter][location][healthcareFacility][@classCode].toString(): &apos;+msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;location&apos;][&apos;healthcareFacility&apos;][&apos;@classCode&apos;].toString()); }
						objEncounter.healthcareFacility_classCode= msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;location&apos;][&apos;healthcareFacility&apos;][&apos;@classCode&apos;].toString();
					} // end if 
				} // end if

				// set healthcareFacility Location 
				if(typeof msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;location&apos;][&apos;healthcareFacility&apos;][&apos;location&apos;] !== &apos;undefined&apos;) {
	
					// set healthcareFacility Location classCode
					if((typeof msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;location&apos;][&apos;healthcareFacility&apos;][&apos;location&apos;][&apos;@classCode&apos;] != null)&amp;&amp;(msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;location&apos;][&apos;healthcareFacility&apos;][&apos;location&apos;][&apos;@classCode&apos;].toString().length&gt;0)) {
						if(debug&gt;0) { logger.error(&apos;msg[componentOf][encompassingEncounter][location][healthcareFacility][location][@classCode].toString(): &apos;+msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;location&apos;][&apos;healthcareFacility&apos;][&apos;location&apos;][&apos;@classCode&apos;].toString()); }
						objEncounter.healthcareFacilityLocation_classCode= msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;location&apos;][&apos;healthcareFacility&apos;][&apos;location&apos;][&apos;@classCode&apos;].toString();
					} // end if 

					// set healthcareFacility Location Name - use for HealthcareFacilityTypeCode displayName
					if(typeof msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;location&apos;][&apos;healthcareFacility&apos;][&apos;location&apos;][&apos;name&apos;] !== &apos;undefined&apos;) {
						if((typeof msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;location&apos;][&apos;healthcareFacility&apos;][&apos;location&apos;][&apos;name&apos;] != null)&amp;&amp;(msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;location&apos;][&apos;healthcareFacility&apos;][&apos;location&apos;][&apos;name&apos;].toString().length&gt;0)) {
							if(debug&gt;0) { logger.error(&apos;msg[componentOf][encompassingEncounter][location][healthcareFacility][location][name].toString(): &apos;+msg.componentOf.encompassingEncounter.location.healthcareFacility.location.name.toString()); }
							objEncounter.healthcareFacilityLocation_name= msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;location&apos;][&apos;healthcareFacility&apos;][&apos;location&apos;][&apos;name&apos;].toString();
							channelMap.put(healthcareFacilityDisplayName,objEncounter.healthcareFacilityLocation_name);
						} // end if 
					} // end if
				} // end if 
			} // end if 
		} // end if 
	} // end if
		
	return objEncounter;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.5.1">
            <id>ddf9102b-8eaa-451e-875c-d359ef078c35</id>
            <name>getPatientRole</name>
            <revision>21</revision>
            <lastModified>
              <time>1519467489697</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/** getPatientRole(msg)

  	- Desc: This function receives CCD msg and returns from patientRole Object

   	@param {String} msg - this contains the raw message (string)
	@return {object} objPatientRole - this contains the patientRole elements composed into a single objPatientRole object.
*/
function getPatientRole(msg) {

	// define variables
	if (typeof(msg[&apos;recordTarget&apos;][&apos;patientRole&apos;].toString()) !== undefined) {

		var objPatientRole= new Object();
		objPatientRole.patientId=		msg[&apos;recordTarget&apos;][&apos;patientRole&apos;][&apos;id&apos;][0][&apos;@extension&apos;].toString();
		objPatientRole.root=			msg[&apos;recordTarget&apos;][&apos;patientRole&apos;][&apos;id&apos;][0][&apos;@root&apos;].toString();
		objPatientRole.streetAddress=		msg[&apos;recordTarget&apos;][&apos;patientRole&apos;][&apos;addr&apos;][&apos;streetAddressLine&apos;].toString();
		objPatientRole.city=			msg[&apos;recordTarget&apos;][&apos;patientRole&apos;][&apos;addr&apos;][&apos;city&apos;].toString();
		objPatientRole.state=			msg[&apos;recordTarget&apos;][&apos;patientRole&apos;][&apos;addr&apos;][&apos;state&apos;].toString();
		objPatientRole.postalCode=		msg[&apos;recordTarget&apos;][&apos;patientRole&apos;][&apos;addr&apos;][&apos;postalCode&apos;].toString();
		objPatientRole.country=			msg[&apos;recordTarget&apos;][&apos;patientRole&apos;][&apos;addr&apos;][&apos;country&apos;].toString();
		objPatientRole.lastName=			msg[&apos;recordTarget&apos;][&apos;patientRole&apos;][&apos;patient&apos;][&apos;name&apos;][&apos;family&apos;][0].toString();
		objPatientRole.firstName=		msg[&apos;recordTarget&apos;][&apos;patientRole&apos;][&apos;patient&apos;][&apos;name&apos;][&apos;given&apos;][0].toString();
		objPatientRole.gender=			msg[&apos;recordTarget&apos;][&apos;patientRole&apos;][&apos;patient&apos;][&apos;administrativeGenderCode&apos;][&apos;@code&apos;].toString();
		objPatientRole.dateOfBirth=		msg[&apos;recordTarget&apos;][&apos;patientRole&apos;][&apos;patient&apos;][&apos;birthTime&apos;][&apos;@value&apos;].toString();
		// objPID.dateOfBirth=			convertDate(msg[&apos;PID&apos;][&apos;PID.7&apos;][&apos;PID.7.1&apos;].text().toString(),&quot;MM-dd-yyyy&quot;);
		objPatientRole.phoneNumber=		msg[&apos;recordTarget&apos;][&apos;patientRole&apos;][&apos;telecom&apos;][&apos;@value&apos;].toString();

		return objPatientRole;
	}
}
							</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.5.1">
            <id>ceb659b6-95fb-4a37-8bb1-7198343b0976</id>
            <name>getPerformer</name>
            <revision>59</revision>
            <lastModified>
              <time>1526533877892</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/** getPerformer(msg)

  	- Desc: This function receives CCD msg and returns Performer objects
  	- Modified
	2018-02-16 18:21 CT JER - Modified call the getAssignedEntity function to reference the serviceEvent\assignedEntity child elements and attributes instead of using XPath assignments - reusability of the getAssignedEntities
	2018-02-16 10:40 CT JER - Corrected typo error still referencing performerChild object no longer in reference/deprecated usage of performer[&apos;functionCode&apos;][&apos;@displayName&apos;] XPath reference
	2018-02-15 08:37 CT JER - Modified changed from usage of children(), child and attribute XML ECMAScript E4X calls to specific XMLPath calls
  	2018-02-14 17:19 CT JER - Modified to provide additional handling typeof != &apos;undefined&apos; on the functionCode element and child elements and their attributes
	2018-02-07 11:44 CT JER - Modified for additional handling verify typeof !== &apos;undefined&apos;

   	@param {String} msg - this contains the raw message (string)
	@return {array} arrPerformer - contains arrPerformer array contains objPerformer objects and related properties.
*/

function getPerformer(msg) {

	var debug= 0;
	var arrPerformer= new Array();

	if(msg[&apos;documentationOf&apos;][&apos;serviceEvent&apos;][&apos;performer&apos;] !== &apos;undefined&apos;) {
		var strPerfCount= 0;
		for each (performer in msg[&apos;documentationOf&apos;][&apos;serviceEvent&apos;][&apos;performer&apos;][0]) {
			if(debug&gt;0) { logger.error(&apos;performer[&apos;+strPerfCount+&apos;]: &apos;+performer); }
			//if(typeof performer !== &apos;undefined&apos;) {
				var objPerformer= new Object;
				if(performer.children().length()&gt;0) {
					
					if(debug&gt;0) { logger.error(&apos;Performer.children().length: &apos;+performer.children().length()+&apos; children names: &apos;+performer.children()); }
					// str = str.replace(/xmlns=\&quot;(.*?)\&quot;/g, &apos;&apos;);
					
					if(performer[&apos;functionCode&apos;][&apos;@code&apos;] != null) {
						// check for functionCode element and it&apos;s attributes
						if(typeof performer[&apos;functionCode&apos;][&apos;@code&apos;] !== &apos;undefined&apos;) {
							// check for functionCode code attribute
							if(performer[&apos;functionCode&apos;][&apos;@code&apos;].toString().length&gt;0) {
								// get Provider Role
								if(debug&gt;0) { logger.error(&apos;performer[function][@code].toString(): &apos;+performer[&apos;function&apos;][&apos;@code&apos;].toString()); }
								objPerformer.functionCode= performer[&apos;function&apos;][&apos;@code&apos;].toString();				// PP
							} // end if 
						} // end if 
						// check for functionCode displayName attribute
						if(typeof performer[&apos;functionCode&apos;][&apos;@displayName&apos;] !=null) {
							// check for functionCode displayName attribute
							if(performer[&apos;functionCode&apos;][&apos;@displayName&apos;].toString().length&gt;0) {
								// get Provider Role
								if(debug&gt;0) { logger.error(&apos;performer[function][@displayName].toString(): &apos;+performer[&apos;function&apos;][&apos;@displayName&apos;].toString()); }
								objPerformer.functionDisplayNmae= performer[&apos;functionCode&apos;][&apos;@displayName&apos;].toString();						// PP
							} // end if 
						} // end if 
						if(typeof performer[&apos;functionCode&apos;][&apos;@codeSystem&apos;] !=null) {
							// check for functionCode codeSystem attribute
							if(performer[&apos;functionCode&apos;][&apos;@codeSystem&apos;].toString().length&gt;0) {
								if(debug&gt;0) { logger.error(&apos;performer[function][@codeSystem].toString(): &apos;+performer[&apos;function&apos;][&apos;@codeSystem&apos;].toString()); }
								objPerformer.functionCodeSystem= performer[&apos;function&apos;][&apos;@codeSystem&apos;].toString(); 		// 2.16.840.1.113883.12.443
							} // end if 
						} // end if
					} // end if

					var objAssignedEntity= getAssignedEntity(performer);
					if(objAssignedEntity !== &apos;undefined&apos;) {
						
						// check for assignedEntity id assigningAuthorityName 
						if(typeof objAssignedEntity.assigningAuthorityName !== &apos;undefined&apos;) {
							if(objAssignedEntity.assigningAuthorityName.toString().length&gt;0) {
								if(debug&gt;0) { logger.error(&apos;performer[assignedEntity][id][@assigningAuthorityName].toString(): &apos;+objAssignedEntity.assigningAuthorityName.toString()); }
								objPerformer.assignedEntity_assigningAuthorityName= objAssignedEntity.assigningAuthorityName.toString(); 		// 2.16.840.1.113883.12.443
							} // end if							
						} // end if 
						
						// check for assignedEntity id root 
						if(typeof objAssignedEntity.root !== &apos;undefined&apos;) {
							if(objAssignedEntity.root.toString().length&gt;0) {
								if(debug&gt;0) { logger.error(&apos;performer[assignedEntity][id][@root].toString(): &apos;+objAssignedEntity.root.toString()); }
								objPerformer.assignedEntity_root= objAssignedEntity.root.toString(); 		// 2.16.840.1.113883.12.443
							} // end if							
						} // end if 

						// check for assignedEntity id extension 
						if(typeof objAssignedEntity.extension !== &apos;undefined&apos;) {
							if(objAssignedEntity.extension.toString().length&gt;0) {
								if(debug&gt;0) { logger.error(&apos;performer[assignedEntity][id][@extension].toString(): &apos;+objAssignedEntity.extension.toString()); }
								objPerformer.assignedEntity_extension= objAssignedEntity.extension.toString(); 		// 2.16.840.1.113883.12.443
							} // end if							
						} // end if 

						
						// &lt;code code=&quot;208D00000X&quot; codeSystem=&quot;2.16.840.1.113883.6.101&quot; codeSystemName=&quot;NUCC Health Care Provider Taxonomy&quot; displayName=&quot;General Practice&quot;/&gt;
						// check for assignedEntity code element
						if(typeof objAssignedEntity.code !== &apos;undefined&apos;) {
							if(objAssignedEntity.code.toString().length&gt;0) {
								if(debug&gt;0) { logger.error(&apos;performer[assignedEntity][code][@code].toString(): &apos;+objAssignedEntity.code.toString()); }
								objPerformer.assignedEntity_code= objAssignedEntity.code.toString(); 				// 208D00000X
							} // end if							
						} // end if 

						// check for assignedEntity codeSystem element
						if(typeof objAssignedEntity.codeSystem !== &apos;undefined&apos;) {
							if(objAssignedEntity.codeSystem.toString().length&gt;0) {
								if(debug&gt;0) { logger.error(&apos;performer[assignedEntity][code][@codeSystem].toString(): &apos;+objAssignedEntity.codeSystem.toString()); }
								objPerformer.assignedEntity_codeSystem= objAssignedEntity.codeSystem.toString(); 			// 2.16.840.1.113883.6.101
							} // end if							
						} // end if 
						
						// check for assignedEntity codeSystemName element
						if(typeof objAssignedEntity.codeSystemName !== &apos;undefined&apos;) {
							if(objAssignedEntity.codeSystemName.toString().length&gt;0) {
								if(debug&gt;0) { logger.error(&apos;performer[assignedEntity][code][@codeSystemName].toString(): &apos;+objAssignedEntity.codeSystemName.toString()); }
								objPerformer.assignedEntity_codeSystemName= objAssignedEntity.codeSystemName.toString(); 		// NUCC Health Care Provider Taxonomy
							} // end if							
						} // end if 

						// check for assignedEntity displayName element
						if(typeof objAssignedEntity.displayName !== &apos;undefined&apos;) {
							if(objAssignedEntity.displayName.toString().length&gt;0) {
								if(debug&gt;0) { logger.error(&apos;performer[assignedEntity][code][@displayName].toString(): &apos;+objAssignedEntity.displayName.toString()); }
								objPerformer.assignedEntity_displayName= objAssignedEntity.codeSystemName.toString(); 		// NUCC Health Care Provider Taxonomy
							} // end if							
						} // end if 						

						
						// check for assignedEntity assignedPerson Given name
						if(typeof objAssignedEntity.givenName !== &apos;undefined&apos;) {
							if(objAssignedEntity.givenName.toString().length&gt;0) {
								if(debug&gt;0) { logger.error(&apos;performer[assignedEntity][assignedPerson][name][given].toString(): &apos;+objAssignedEntity.givenName.toString()); }
								objPerformer.assignedEntity_givenName= objAssignedEntity.givenName.toString(); 		// NUCC Health Care Provider Taxonomy
							} // end if							
						} // end if
						
						// check for assignedEntity assignedPerson Family name
						if(typeof objAssignedEntity.familyName !== &apos;undefined&apos;) {
							if(objAssignedEntity.familyName.toString().length&gt;0) {
								if(debug&gt;0) { logger.error(&apos;performer[assignedEntity][assignedPerson][name][family].toString(): &apos;+objAssignedEntity.familyName.toString()); }
								objPerformer.assignedEntity_familyName= objAssignedEntity.familyName.toString(); 		// NUCC Health Care Provider Taxonomy
							} // end if							
						} // end if

						if(debug&gt;0) { logger.error(&apos;getPerformer objAssignedEntity.suffix: &apos;+objAssignedEntity.suffix+
							&apos; typeof: &apos;+typeof objAssignedEntity.suffix); }
						// check for assignedEntity assignedPerson Suffix
						if(typeof objAssignedEntity.suffix !== &apos;undefined&apos;) {
							if(objAssignedEntity.suffix.toString().length&gt;0) {
								if(debug&gt;0) { logger.error(&apos;performer[assignedEntity][assignedPerson][name][suffix].toString(): &apos;+objAssignedEntity.suffix.toString()); }
								objPerformer.assignedEntity_suffix= objAssignedEntity.suffix.toString(); 		// NUCC Health Care Provider Taxonomy
							} // end if							
						} // end if
						
						
						// check for assignedEntity representedOrganization name
						if(typeof objAssignedEntity.representedOrganizationName !== &apos;undefined&apos;) {
							if(objAssignedEntity.representedOrganizationName.toString().length&gt;0) {
								if(debug&gt;0) { logger.error(&apos;performer[assignedEntity][representedOrganization][name].toString(): &apos;+objAssignedEntity.representedOrganizationName.toString()); }
								objPerformer.assignedEntity_representedOrganization= objAssignedEntity.representedOrganizationName.toString(); 		// Walgreens Drug Store 12562
							} // end if							
						} // end if
						
					} // end if 

				} // end if
			//} // end if 
			arrPerformer.push(objPerformer);
			strPerfCount++;
		} // end for each
	} // end if
	channelMap.put(&apos;objPerformer&apos;,arrPerformer);
	return arrPerformer;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.5.1">
            <id>a3b08547-8ed2-4097-a7e7-ea43e052f13b</id>
            <name>getServiceEvent</name>
            <revision>7</revision>
            <lastModified>
              <time>1526533878624</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/** getServiceEvent(msg)

  	- Desc: This function receives CCD msg and returns Service Event objects
  	- Modified: 
  	2018-02-14 JER - Modified to capture the serviceEvent ClassCode and DisplayName attribute values
  	2018-02-12 JER - multiple documentationOf (1..M) with (1..1) serviceEvents

   	@param {String} msg - this contains the raw message (string)
	@return {array} arrServiceEvents - this array contains list of objServiceEvent objects composed into the arrServiceEvents
*/
function getServiceEvent(msg) {

	// define variables
	var arrServiceEvent= new Array();
	var tSrvcCount= 1;

	if(msg[&apos;documentationOf&apos;] !== &apos;undefined&apos;) {
		for each(documentationOf in msg[&apos;documentationOf&apos;]) {
			if(documentationOf.serviceEvent !== &apos;undefined&apos;) {
				for each(serviceEvent in documentationOf.serviceEvent) {
					var objServiceEvent= new Object();
					objServiceEvent.id= 	tSrvcCount;
					if(typeof serviceEvent.@classCode !== &apos;undefined&apos;) {
						if(serviceEvent.@classCode.length()&gt;0) {
							objServiceEvent.classCode=	serviceEvent.@classCode.toString();
						} // end if 
					} // end if 
					if(serviceEvent.children().length()&gt;0) {
						if(typeof serviceEvent.id.@extension !== &apos;undefined&apos;) {
							objServiceEvent.extension=	serviceEvent.id.@extension.toString();
						} else {
							objServiceEvent.extension=    &apos;&apos;;
						} // end if
						if(typeof serviceEvent.id.@root !== &apos;undefined&apos;) {
							objServiceEvent.root=		serviceEvent.id.@root.toString();
						} else {
							objServiceEvent.root=		&apos;&apos;;
						} // end if
						if(typeof serviceEvent.code.@displayName !== &apos;undefined&apos;) {
							objServiceEvent.displayName=	serviceEvent.code.@displayName.toString();
						} else {
							objServiceEvent.displayName=    &apos;&apos;;
						} // end if
						if(typeof serviceEvent.effectiveTime.low.@value !== &apos;undefined&apos;) {
							objServiceEvent.startTime=	serviceEvent.effectiveTime.low.@value.toString().substring(0,14);
						} else {
							objServiceEvent.startTime=	&apos;&apos;;
						} // end if
						if(typeof serviceEvent.effectiveTime.high.@value !== &apos;undefined&apos;) {
							objServiceEvent.stopTime=	serviceEvent.effectiveTime.high.@value.toString().substring(0,14);
						} else {
							objServiceEvent.stopTime=	&apos;&apos;;
						} // end if
					} // end if 
					arrServiceEvent.push(objServiceEvent);
				} // end for each	
			} // end if 
		} // end for each
	} // end if 
	return arrServiceEvent;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.5.1">
            <id>39531322-8698-4cdf-9824-d225f1bc60ea</id>
            <name>getXdsAuthorPerson</name>
            <revision>7</revision>
            <lastModified>
              <time>1519634065158</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/** getXdsAuthorPerson

	- Desc: This function receives Author Object and returns a CCD authorPerson XML
	- Modified:
	2018-02-25 12:35 PM CST - Perform additional checks on the supplied object typeof and null checks

	@param {object} objAuthor - the objAuthor object passed input argument
	@return {XML} return stringXML containing the newly devised XML containing the authorPerson

*/
function getXdsAuthorPerson(objAuthor) {

	// 0^Allscripts^System^^^^^^&amp;amp;1.3.6.1.4.1.22812.4.10065404.0.3.3
	var authorPerson= &apos;&apos;;
	var debug= 0;

	if(debug&gt;0) { logger.error(&apos;getXdsAuthorPerson Input objAuthor: &apos;+objAuthor); }

	// Author Id Extension
	if((typeof objAuthor.extension !== &apos;undefined&apos;)&amp;&amp;(objAuthor.extension != null)) {
		if(objAuthor.extension.toString().length&gt;0) {
			if(debug&gt;0) { logger.error(&apos;objAuthor.extension: &apos;+objAuthor.extension.toString()); }
			authorPerson += objAuthor.extension.toString()+&apos;^&apos;;
		} else {
			authorPerson += &apos;^&apos;;
		} // end if
	} else {
		authorPerson += &apos;^&apos;;
	} // end if 

	// Author LastName
	if((typeof objAuthor.idExtension !== &apos;undefined&apos;)&amp;&amp;(objAuthor.idExtension != null)) {
		if(objAuthor.idExtension.toString().length&gt;0) {
			authorPerson += objAuthor.idExtension.toString()+&apos;^&apos;;
		} else {
			authorPerson += &apos;^&apos;;
		} // end if
	} else {
		authorPerson += &apos;^&apos;;
	} // end if 

	// Author FirstName
	if((typeof objAuthor.idExtension !== &apos;undefined&apos;)&amp;&amp;(objAuthor.idExtension != null)) {
		if(objAuthor.idExtension.toString().length&gt;0) {
			authorPerson += objAuthor.idExtension.toString()+&apos;^&apos;;
		} else {
			authorPerson += &apos;^&apos;;
		} // end if
	} else {
		authorPerson += &apos;^&apos;;
	} // end if 


	// Author Id Root - objAssignedAuthor.root
	if((typeof objAuthor.root !== &apos;undefined&apos;)&amp;&amp;(objAuthor.root != null)) {
		if(objAuthor.root.toString().length&gt;0) {
			if(debug&gt;0) { logger.error(&apos;objAuthor.root: &apos;+objAuthor.root.toString()); }
			authorPerson += &apos;^^^^^&apos;+objAuthor.root.toString();
		} else {
			authorPerson += &apos;^^^^^&apos;;
		} // end if
	} else {
		authorPerson += &apos;^^^^^&apos;; 
	} // end if

	if(debug) { logger.error(&apos;getXdsAuthorPerson authorPerson: &apos;+authorPerson); }
	channelMap.put(&apos;authorPerson&apos;,authorPerson);	

	return authorPerson;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.5.1">
            <id>bac30250-f269-474b-a628-e41b4a27ca54</id>
            <name>getXdsSourcePatientId</name>
            <revision>17</revision>
            <lastModified>
              <time>1526533879166</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/** getXdsSourcePatientId(object)

  	 - Desc: This function receives patientRole JavaScript Object and returns a sourcePatientId String

	@param {object} objPatientRole - the objPatientRole object passed input argument
	@return {string} return string containing the newly devised string containing the sourcePatientId
*/
// @return {XML} return stringXML containing the newly devised XML containing the sourcePatientInfo
function getXdsSourcePatientId(objPatientRole) {

	var debug= 0;
	/*
	var objSourcePatientId= new Object;
	//if (msg.namespace() != undefined) { default xml namespace = msg.namespace(); } else { default xml namespace = &apos;&apos;; }
	var rim = new Namespace(&apos;urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0&apos;);

	var stringXML= new XML(&apos;&lt;ValueList/&gt;&apos;);
	*/
	if(typeof objPatientRole.patientId !== &apos;undefined&apos;) {
		var pid_3=  objPatientRole.patientId+&quot;^^^&amp;amp;&quot;+objPatientRole.root+&quot;&amp;amp;ISO&quot;;
		if(debug&gt;1) { logger.error(&quot;objPatientRole.patientid: &quot;+objPatientRole.patientId.toString()); }
	} else { var pid_3= &apos;&apos;; }
			
	// var stringXML= stringXML.appendChild(&apos;&lt;Value&gt;&apos;+pid_3+&apos;&lt;/Value&gt;&apos;);
	var strSourcePatientId= pid_3;

	return strSourcePatientId;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.5.1">
            <id>cc1f343b-bfa4-4994-9402-bb78c1ad6388</id>
            <name>getXdsSourcePatientInfo</name>
            <revision>16</revision>
            <lastModified>
              <time>1526533937195</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/** getXdsSourcePatientInfo(object)

  	- Desc: This function receives patientRole JavaScript Object and returns a XML SourcePatientInfo JavaScript object

	@param {object} objPatientRole - the objPatientRole object passed input argument
	@return {object} return object containing the newly devised string for XML containing the sourcePatientInfo
*/
// @return {XML} return stringXML containing the newly devised XML containing the sourcePatientInfo
function getXdsSourcePatientInfo(objPatientRole) {

	var objSourcePatientInfo= new Object;
	var rim = new Namespace(&apos;urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0&apos;);
	var stringXML= new XML(&apos;&lt;ValueList/&gt;&apos;);
	
	var pid_3=  &quot;PID-3|&quot;+objPatientRole.patientId+&quot;^^^&amp;amp;&quot;+objPatientRole.root+&quot;&amp;amp;ISO&quot;
	var stringXML= stringXML.appendChild(&apos;&lt;Value&gt;&apos;+pid_3+&apos;&lt;/Value&gt;&apos;);
	objSourcePatientInfo.pid3= pid_3;
	
	var pid_5=  &quot;PID-5|&quot;+objPatientRole.lastName+&quot;^&quot;+objPatientRole.firstName+&quot;^^^^&quot;
	var stringXML= stringXML.appendChild(&apos;&lt;Value&gt;&apos;+pid_5+&apos;&lt;/Value&gt;&apos;);
	objSourcePatientInfo.pid5= pid_5;
	
	var pid_7=  &quot;PID-7|&quot;+objPatientRole.dateOfBirth
	var stringXML= stringXML.appendChild(&apos;&lt;Value&gt;&apos;+pid_7+&apos;&lt;/Value&gt;&apos;);
	objSourcePatientInfo.pid7= pid_7;
	
	var pid_8=  &quot;PID-8|&quot;+objPatientRole.gender
	var stringXML= stringXML.appendChild(&apos;&lt;Value&gt;&apos;+pid_8+&apos;&lt;/Value&gt;&apos;);
	objSourcePatientInfo.pid8= pid_8;
	
	var pid_11= &quot;PID-11|&quot;+objPatientRole.streetAddress+&quot;^^&quot;+objPatientRole.city+&quot;^&quot;+objPatientRole.state+&quot;^&quot;+objPatientRole.postalCode+&quot;^&quot;+objPatientRole.country
	var stringXML= stringXML.appendChild(&apos;&lt;Value&gt;&apos;+pid_11+&apos;&lt;/Value&gt;&apos;);
	objSourcePatientInfo.pid11= pid_11;
	
	var pid_13= &quot;PID-13|&quot;+objPatientRole.phoneNumber
	var stringXML= stringXML.appendChild(&apos;&lt;Value&gt;&apos;+pid_13+&apos;&lt;/Value&gt;&apos;);
	objSourcePatientInfo.pid13= pid_13;
	
	return objSourcePatientInfo;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.5.1">
            <id>d78fd3dc-2f75-4b0e-ab30-1e7eea48e0c1</id>
            <name>setXdsAuthor</name>
            <revision>3</revision>
            <lastModified>
              <time>1526534006203</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/** setXdsMetadataAuthor(object)

  	- Desc: This setXdsAuthor function receives Javascript Array of Objects and author XML string
  	- Modified:
  	2018-02-26 19:20 CST - Under development
	2018-02-25 12:40PM CST - Replacement of the Call getPerformer, getAuthor and usage of objEncounter transformation function.

   	@param {object} arrPerformer - this contains the Javascript Object (object) - could pass in 
	@return {XML} authorXML - contains authorXML XML Object string to build out the Template : XDSDocumentEntry.author (urn:uuid:93606bcf-9494-43ec-9b4e-a7748d1a838d) XML scheme.

	Reference: https://gazelle.ihe.net/XDStarClient/rimihe-templates/rimihe-Author_XDSDocumentEntry.html
		
*/

function setXdsMetadataAuthor(arrAuthors) {

	var debug= 1;
	var i= 0;
	
	if(debug&gt;0) { logger.error(&apos;setXdsAuthor arrAuthors: &apos;+JSON.stringify(arrAuthors)); } 
	
	if(typeof arrAuthor !== &apos;undefined&apos;) {
		if(arrAuthor.length&gt;1) {
			for each(objAuthor in arrAuthors) {
				if(debug&gt;0) { logger.error(&apos;objAuthor[&apos;+i+&apos;]: &apos;+JSON.stringify(objAuthor)+
					&apos; typeof: &apos;+typeof objAuthor+
					&apos; length: &apos;+objAuthor.length());
				} // end if 
		
				var authorXML = new XML(&apos;&lt;rim:Classification id=&quot;${uuid}&quot; classificationScheme=&quot;urn:uuid:93606bcf-9494-43ec-9b4e-a7748d1a838d&quot; classifiedObject=&quot;${extrinsicObjectUUID}&quot;&gt;&lt;/rim:Classification&gt;&apos;);

				// need to confirm the objAuthor contains the representedOrganization
				// create Author Person - using either objAuthor.assignedEntity_familyName OR objEncounter.assignedEntity_familyName call the getAuthorPerson function
				if((typeof objAuthor.assignedEntity_familyName !== &apos;undefined&apos;)&amp;&amp;(objAuthor.assignedEntity_familyName.toString() != null)) { 
					var xmlAuthor= new XML(&apos;&lt;rim:Slot name=&quot;authorPerson&quot;&gt;&lt;rim:ValueList&gt;&lt;rim:Value&gt;&lt;/rim:Value&gt;&lt;/rim:ValueList&gt;&lt;/rim:Slot&gt;&apos;);
					xmlAuthor[&apos;rim:Slot&apos;][&apos;rim:ValueList&apos;][&apos;rim:Value&apos;]= getAuthorPerson(objAuthor);
				} else {
					var xmlAuthor= new XML(&apos;&lt;rim:Slot name=&quot;authorPerson&quot;&gt;&lt;rim:ValueList&gt;&lt;rim:Value&gt;&lt;/rim:Value&gt;&lt;/rim:ValueList&gt;&lt;/rim:Slot&gt;&apos;);
				} // end if 
		
				// create Author Institution - objAuthor.authorInstitution
				if((typeof objAuthor.authorInstitution !== &apos;undefined&apos;)&amp;&amp;(objAuthor.authorInstitution.toString() != null)) {
					var xmlAuthor= new XML(&apos;&lt;rim:Slot name=&quot;authorInstitution&quot;&gt;&lt;rim:ValueList&gt;&lt;rim:Value&gt;&lt;/rim:Value&gt;&lt;/rim:ValueList&gt;&lt;/rim:Slot&gt;&apos;);
					xmlAuthor[&apos;rim:Slot&apos;][&apos;rim:ValueList&apos;][&apos;rim:Value&apos;]= objAuthor.authorInstitution.toString();
				} else {
					var xmlAuthor= new XML(&apos;&lt;rim:Slot name=&quot;authorInstitution&quot;&gt;&lt;rim:ValueList&gt;&lt;rim:Value&gt;&lt;/rim:Value&gt;&lt;/rim:ValueList&gt;&lt;/rim:Slot&gt;&apos;);
				} // end if
		
				// create Author Role 
				// objPerformers.functionDisplayName
				if((typeof objAuthor.functionDisplayName !== &apos;undefined&apos;)&amp;&amp;(objAuthor.functionDisplayName.toString() != null)) {
					if(objAuthor.functionDisplayName.toString().length&gt;0) {
						var xmlAuthor= new XML(&apos;&lt;rim:Slot name=&quot;authorRole&quot;&gt;&lt;rim:ValueList&gt;&lt;rim:Value&gt;&lt;/rim:Value&gt;&lt;/rim:ValueList&gt;&lt;/rim:Slot&gt;&apos;);
						xmlAuthor[&apos;rim:Slot&apos;][&apos;rim:ValueList&apos;][&apos;rim:Value&apos;]= objAuthor.functionDisplayName.toString();
					} // end if 
					// objEncounter.encounterParticipant_code
				} else if((typeof objAuthor.encounterParticipant_code !== &apos;undefined&apos;)&amp;&amp;(objAuthor.encounterParticipant_code.toString() != null)) {
					if(objAuthor.encounterParticipant_code.toString().length&gt;0) {
						var xmlAuthor= new XML(&apos;&lt;rim:Slot name=&quot;authorRole&quot;&gt;&lt;rim:ValueList&gt;&lt;rim:Value&gt;&lt;/rim:Value&gt;&lt;/rim:ValueList&gt;&lt;/rim:Slot&gt;&apos;);
						xmlAuthor[&apos;rim:Slot&apos;][&apos;rim:ValueList&apos;][&apos;rim:Value&apos;]= objAuthor.functionDisplayName.toString();
					} // end if 
				// objEncounter.assignedEntity_codeDisplayName
				} else if((typeof objAuthor.assignedEntity_codeDisplayName !== &apos;undefined&apos;)&amp;&amp;(objAuthor.assignedEntity_codeDisplayName.toString() != null)) {
					if(objAuthor.assignedEntity_codeDisplayName.toString().length&gt;0) {
						var xmlAuthor= new XML(&apos;&lt;rim:Slot name=&quot;authorRole&quot;&gt;&lt;rim:ValueList&gt;&lt;rim:Value&gt;&lt;/rim:Value&gt;&lt;/rim:ValueList&gt;&lt;/rim:Slot&gt;&apos;);
						xmlAuthor[&apos;rim:Slot&apos;][&apos;rim:ValueList&apos;][&apos;rim:Value&apos;]= objAuthor.assignedEntity_codeDisplayName.toString();
					} // end if 
				} else {
					var xmlAuthor= new XML(&apos;&lt;rim:Slot name=&quot;authorRole&quot;&gt;&lt;rim:ValueList&gt;&lt;rim:Value&gt;Medical Doctor&lt;/rim:Value&gt;&lt;/rim:ValueList&gt;&lt;/rim:Slot&gt;&apos;);
				} // end if 
		
				// create Author Specialty
				// objPerformers.assignedDisplayName
				if((typeof objAuthor.assignedDisplayName !== &apos;undefined&apos;)&amp;&amp;(objAuthor.assignedDisplayName.toString() != null)) {
					if(objAuthor.assignedDisplayName.toString().length&gt;0) {
						var xmlAuthor= new XML(&apos;&lt;rim:Slot name=&quot;authorSpecialty&quot;&gt;&lt;rim:ValueList&gt;&lt;rim:Value&gt;&lt;/rim:Value&gt;&lt;/rim:ValueList&gt;&lt;/rim:Slot&gt;&apos;);
						xmlAuthor[&apos;rim:Slot&apos;][&apos;rim:ValueList&apos;][&apos;rim:Value&apos;]= objAuthor.assignedDisplayName.toString();
					} // end if 
				// objEncounter.assignedEntity_codeDisplayName
				} else if((typeof objAuthor.assignedEntity_codeDisplayName !== &apos;undefined&apos;)&amp;&amp;(objAuthor.assignedEntity_codeDisplayName.toString() != null)) {
					if(objAuthor.assignedEntity_codeDisplayName.toString().length&gt;0) {
						var xmlAuthor= new XML(&apos;&lt;rim:Slot name=&quot;authorSpecialty&quot;&gt;&lt;rim:ValueList&gt;&lt;rim:Value&gt;&lt;/rim:Value&gt;&lt;/rim:ValueList&gt;&lt;/rim:Slot&gt;&apos;);
						xmlAuthor[&apos;rim:Slot&apos;][&apos;rim:ValueList&apos;][&apos;rim:Value&apos;]= objAuthor.assignedEntity_codeDisplayName.toString();
					} // end if 
				} else {
					var xmlAuthor= new XML(&apos;&lt;rim:Slot name=&quot;authorSpecialty&quot;&gt;&lt;rim:ValueList&gt;&lt;rim:Value&gt;General Medicine&lt;/rim:Value&gt;&lt;/rim:ValueList&gt;&lt;/rim:Slot&gt;&apos;);
				} // end if 
			} // end for each
		} // end if 
	} else {		
		var classificationXML=     [&apos;rim:Classification&apos;][&apos;@id&apos;]=&quot;1234&quot;; 
		classificationXML+=        [&apos;rim:Classification&apos;][&apos;@ClassificationScheme&apos;]= &quot;urn:uuid:93606bcf-9494-43ec-9b4e-a7748d1a838d&quot;;
		classificationXML+=        [&apos;rim:Classification&apos;][&apos;@classifiedObject&apos;]= &quot;&quot;;
		var authorXML = new XML(classificationXML);
			
		var authorPersonXML=    	new XML(&apos;&lt;rim:Slot name=&quot;authorPerson&quot;&gt;&lt;/rim:Slot&gt;&apos;);
		authorPersonXML+= 		new XML(&apos;&lt;rim:ValueList&gt;&lt;/rim:ValueList&gt;&apos;);
		authorPersonXML+=	 	new XML(&apos;&lt;rim:Value&gt;&lt;/rim:Value&gt;&apos;);
		authorXML+= authorPersonXML; 

		var authorInstitutionXML=    new XML(&apos;&lt;rim:Slot name=&quot;authorInstitution&quot;&gt;&lt;/rim:Slot&gt;&apos;);
		authorInstitutionXML+= 		new XML(&apos;&lt;rim:ValueList&gt;&lt;/rim:ValueList&gt;&apos;);
		authorInstitutionXML+=		new XML(&apos;&lt;rim:Value&gt;&lt;/rim:Value&gt;&apos;);
		authorXML+= authorInstitutionXML;

		var authorRoleXML=  new XML(&apos;&lt;rim:Slot name=&quot;authorRole&quot;&gt;&lt;/rim:Slot&gt;&apos;);
		authorRoleXML+= 	new XML(&apos;&lt;rim:ValueList&gt;&lt;/rim:ValueList&gt;&apos;);
		authorRoleXML+=	new XML(&apos;&lt;rim:Value&gt;&lt;/rim:Value&gt;&apos;);
		authorXML+= autorRoleXML;
		
		var authorSpecialtyXML =		new XML(&apos;&lt;rim:Slot name=&quot;authorSpecialty&quot;&gt;&lt;/rim:Slot&gt;&apos;);
		authorSpecialtyXML+= new XML(&apos;&lt;rim:ValueList&gt;&lt;/rim:ValueList&gt;&apos;);
		authorSpecialtyXML+= new XML(&apos;&lt;rim:Value&gt;&lt;/rim:Value&gt;&apos;);
		authorXML+= authorSpecialtyXML;
				
	} // end if 	
		
	return authorXML;
} // end function</code>
            </properties>
          </codeTemplate>
        </codeTemplates>
      </codeTemplateLibrary>
      <codeTemplateLibrary version="3.5.1">
        <id>ee8d4c72-de8a-4e42-8de4-e56376c99c69</id>
        <name>HL7v3</name>
        <revision>7</revision>
        <lastModified>
          <time>1528296902752</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <description>HL7v3 Library</description>
        <includeNewChannels>false</includeNewChannels>
        <enabledChannelIds>
          <string>38e80069-5a80-4483-9a22-02c928973719</string>
          <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
          <string>e882ff76-1127-4e35-838c-93cbc2655ef9</string>
        </enabledChannelIds>
        <disabledChannelIds>
          <string>6a2a6c33-33da-4783-b823-bd95bf387981</string>
          <string>5beae4c2-e7f8-4ae3-9fca-703dea9233a2</string>
          <string>3f5ab859-f917-484f-b841-7c9e39174b8e</string>
          <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
          <string>24504c80-a7ef-496d-bca0-c25ce27f4d19</string>
          <string>06d19851-fbd2-446b-be8f-12965d966d2a</string>
          <string>280d822c-1479-4fb6-9e2a-b7267e540c63</string>
          <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
          <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
          <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
          <string>1ae4e7ac-e62f-468c-aa2a-99cbd6139838</string>
          <string>2f6cd9fb-90e2-4121-b05a-cad72d278cc3</string>
          <string>360b408e-86e7-43da-875a-11dd5f07db7e</string>
          <string>0edf321a-b712-47e2-972a-03f2c4c8f0ac</string>
          <string>05075884-fedf-4b8c-96b1-eecaaaf97842</string>
          <string>1892f241-d643-4abb-b0af-b20b87e0cf12</string>
          <string>15708463-af53-428c-88f5-16351dd49b2e</string>
          <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
          <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
          <string>03bc65a0-25b4-48f5-8455-7e58e71b1446</string>
          <string>0638775c-6c87-4a71-b4b3-7ae52be05c1b</string>
          <string>2dbdcefd-11b5-42c8-a365-05038df92fef</string>
          <string>082c9258-e026-460b-a7bb-e67391ef65f9</string>
          <string>06bd4ce9-2338-4c78-86fb-2e04ff9f9e08</string>
          <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
          <string>27139815-1d29-4f32-ad00-fc266f2448cd</string>
          <string>197d7939-edb9-4dc7-af2d-ab91ae9023ad</string>
          <string>368263c0-b071-4c57-afeb-61dc82a898be</string>
          <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
        </disabledChannelIds>
        <codeTemplates>
          <codeTemplate version="3.5.1">
            <id>46863fa1-cc19-42b4-b713-5048a69d7fe1</id>
            <name>getHL7v3AdministrativeGender</name>
            <revision>2</revision>
            <lastModified>
              <time>1517325488064</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/** getHL7v3AdministrativeGender(code)

  	- Desc: This function receives a code system code (string) and returns adminGender array contains both the code and displayName

   	@param {String} code - this contains a code system code (string)
	@return {array} adminGender - this array contains the Gender and DisplayName (key,value) pair in the adminGender array.
*/

function getHL7v3AdministrativeGender(code) {

	// define local variables
	var adminGender= {};
	adminGender.codeSystem= &quot;2.16.840.1.133883.5.1&quot;
	adminGender.codeSystemName= &quot;HL7:AdministrativeGender&quot;;

	if(&quot;M&quot; == code) {
		adminGender.code= &quot;M&quot;;
		adminGender.displayName= &quot;Male&quot;;
	} else if (&quot;F&quot; == code) {
		adminGender.code= &quot;F&quot;;
		adminGender.displayName= &quot;Female&quot;;
	} else {
		adminGender.code= &quot;UN&quot;;
		adminGender.displayName= &quot;Undifferentiated&quot;;
	}

	return adminGender;

}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.5.1">
            <id>e48db441-8556-4a03-a3e2-d018a8f9f608</id>
            <name>getHL7v3Confidentiality</name>
            <revision>3</revision>
            <lastModified>
              <time>1517325488301</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/** getHL7v3Confidentiality(code)

  	- Desc: This function receives a code system code (string) and returns confidentiality array contains both the code and displayName

   	@param {String} code - this contains a code system code (string)
	@return {array} confidentiality - this array contains the Confidentiality Code and DisplayName (key,value) pair in the confidentialityCode array.
*/

function getHL7v3Confidentiality(code) {

	// define local variables
	var confidentiality= {};
	confidentiality.codeSystem= &quot;2.16.840.1.113883.5.25&quot;
	confidentiality.codeSystemName= &quot;HL7:Confidentiality&quot;;

	if(&quot;N&quot; == code) {
		confidentiality.code= &quot;N&quot;;
		confidentiality.displayName= &quot;Normal&quot;;
	} else if (&quot;R&quot; == code) {
		confidentiality.code= &quot;R&quot;;
		confidentiality.displayName= &quot;Restricted&quot;;
	} else {
		confidentiality.code= &quot;V&quot;;
		confidentiality.displayName= &quot;Very Restricted&quot;;
	}

	return confidentiality;

}</code>
            </properties>
          </codeTemplate>
        </codeTemplates>
      </codeTemplateLibrary>
      <codeTemplateLibrary version="3.5.1">
        <id>6975d386-da5e-4267-aa01-5d181743a931</id>
        <name>Utilities</name>
        <revision>26</revision>
        <lastModified>
          <time>1528296902784</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <description>This library was added upon migration to version 3.3.0. It includes all pre-existing
code templates, and is set to be included on all pre-existing and new channels.

You should create your own new libraries and assign code templates to them as you
see fit. You should also link libraries to specific channels, so that you&apos;re not
necessarily including all code templates on all channels all the time.</description>
        <includeNewChannels>true</includeNewChannels>
        <enabledChannelIds>
          <string>38e80069-5a80-4483-9a22-02c928973719</string>
          <string>6a2a6c33-33da-4783-b823-bd95bf387981</string>
          <string>5beae4c2-e7f8-4ae3-9fca-703dea9233a2</string>
          <string>3f5ab859-f917-484f-b841-7c9e39174b8e</string>
          <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
          <string>24504c80-a7ef-496d-bca0-c25ce27f4d19</string>
          <string>06d19851-fbd2-446b-be8f-12965d966d2a</string>
          <string>280d822c-1479-4fb6-9e2a-b7267e540c63</string>
          <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
          <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
          <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
          <string>1ae4e7ac-e62f-468c-aa2a-99cbd6139838</string>
          <string>2f6cd9fb-90e2-4121-b05a-cad72d278cc3</string>
          <string>360b408e-86e7-43da-875a-11dd5f07db7e</string>
          <string>0edf321a-b712-47e2-972a-03f2c4c8f0ac</string>
          <string>05075884-fedf-4b8c-96b1-eecaaaf97842</string>
          <string>1892f241-d643-4abb-b0af-b20b87e0cf12</string>
          <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
          <string>15708463-af53-428c-88f5-16351dd49b2e</string>
          <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
          <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
          <string>03bc65a0-25b4-48f5-8455-7e58e71b1446</string>
          <string>0638775c-6c87-4a71-b4b3-7ae52be05c1b</string>
          <string>2dbdcefd-11b5-42c8-a365-05038df92fef</string>
          <string>082c9258-e026-460b-a7bb-e67391ef65f9</string>
          <string>06bd4ce9-2338-4c78-86fb-2e04ff9f9e08</string>
          <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
          <string>e882ff76-1127-4e35-838c-93cbc2655ef9</string>
          <string>27139815-1d29-4f32-ad00-fc266f2448cd</string>
          <string>197d7939-edb9-4dc7-af2d-ab91ae9023ad</string>
          <string>368263c0-b071-4c57-afeb-61dc82a898be</string>
          <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
        </enabledChannelIds>
        <disabledChannelIds/>
        <codeTemplates>
          <codeTemplate version="3.5.1">
            <id>3bff8e77-8269-463a-aa9d-b3539c885d70</id>
            <name>calcSizeBase64EncodedMsg</name>
            <revision>1</revision>
            <lastModified>
              <time>1518492121304</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function calcSizeBase64EncodedMsg(size) {

	var code_size=    ((size*4)/3)
	var padding_size= (size % 3) ? (3- (size % 3)) : 0;
	var crlfs_size=   2 + (2 * (code_size + padding_size) / 72);
	var total_size=   code_size + padding_size + crlfs_size;

	return total_size;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.5.1">
            <id>b9651842-7ccb-4761-aedf-a9a1461dd5f7</id>
            <name>Convert HL7 Date Format to ISO</name>
            <revision>1</revision>
            <lastModified>
              <time>1525526013518</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Converts standard HL7 v2.x date format to human-readable ISO date format
*/

/*
	Author: IntegrateIT.us LLC
	toISODate: Returns an ISO-formatted date string with specified timezone offset

	Arguments
	---------
		Required
		--------
			hl7DateString:		An HL7-formatted date string (ex: &quot;yyyyMMddHHmmss&quot;

		Optional
		--------
			timezome:			A timezone identifier string corresponding to one of the java.util.TimeZone values (ex: &quot;US/Central&quot;)
*/

function toISODate( hl7DateString, timezone ) {
	var isoDate;
	var dateString;
	var hl7Formatter;
	var isoFormatter = new Packages.java.text.SimpleDateFormat(&quot;yyyy-MM-dd&apos;T&apos;HH:mm:ssZ&quot;);

	if (timezone) {
		isoFormatter.setTimeZone(Packages.java.util.TimeZone.getTimeZone(timezone));
	}
	
	if ( hl7DateString != null &amp;&amp; !isNaN(hl7DateString.substring(0,13)) &amp;&amp; hl7DateString.length &gt; 14 ) {
		hl7Formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyyMMddHHmmssZ&quot;);
	}
	else if ( hl7DateString != null &amp;&amp; !isNaN(hl7DateString) &amp;&amp; hl7DateString &gt; 0 &amp;&amp; hl7DateString.length == 14 ) {
		hl7Formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyyMMddHHmmss&quot;);
	} 
	else if ( hl7DateString != null &amp;&amp; !isNaN(hl7DateString) &amp;&amp; hl7DateString &gt; 0 &amp;&amp; hl7DateString.length == 12 ) {
		hl7Formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyyMMddHHmm&quot;);
	} 
	else if ( hl7DateString != null &amp;&amp; !isNaN(hl7DateString) &amp;&amp; hl7DateString &gt; 0 &amp;&amp; hl7DateString.length == 8 ) {
		hl7Formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyyMMdd&quot;);
	} 
	else dateString = hl7DateString;
	
	try {
		if (hl7Formatter) {
			isoDate = hl7Formatter.parse(hl7DateString);
			isoDate = isoFormatter.format(isoDate);
			dateString = new String(isoDate);
		}
	} catch (err) {
		dateString = hl7DateString;
	} finally {
		return dateString;
	}
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.5.1">
            <id>95e528b7-1e7f-490e-86da-7c14b23ee4f3</id>
            <name>Convert ISO Date Format to HL7</name>
            <revision>1</revision>
            <lastModified>
              <time>1525526031270</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Converts ISO date format to HL7 v2 format
*/

/*
	Author: IntegrateIT.us LLC
	toHL7Date: Returns an HL7-formatted date string with specified timezone offset

	Arguments
	---------
		Required
		--------
			isoDateString:		An ISO-formatted date string (ex: &quot;yyyy-MM-ddTHH:mm:ssZ&quot;

		Optional
		--------
			timezome:			A timezone identifier string corresponding to one of the java.util.TimeZone values (ex: &quot;US/Central&quot;)
*/

function toHL7Date( isoDateString, timezone ) 
{
	var hl7Date;
	var dateString;
	var isoFormatter;
	var hl7Formatter;

	// ISO Date Format: yyyy-MM-dd&apos;T&apos;HH:mm:ss&apos;Z&apos;
	if ( isoDateString != null &amp;&amp; isoDateString.length &lt;= 25 &amp;&amp; isoDateString.length &gt;= 22) {
		isoFormatter = new Packages.java.text.SimpleDateFormat(&quot;yyyy-MM-dd&apos;T&apos;HH:mm:ssZ&quot;);
		hl7Formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyyMMddHHmmssZ&quot;);
		if (timezone) {
			hl7Formatter.setTimeZone(Packages.java.util.TimeZone.getTimeZone(timezone));
		}
	}
	// ISO Date Format: yyyy-MM-dd HH:mm:ss
	else if ( isoDateString != null &amp;&amp; isoDateString.length == 19 ) {
		isoFormatter = new Packages.java.text.SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);
		hl7Formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyyMMddHHmmss&quot;);
	}
	// ISO Date Format: yyyy-MM-dd HH:mm
	else if ( isoDateString != null &amp;&amp; isoDateString.length == 16 ) {
		isoFormatter = new Packages.java.text.SimpleDateFormat(&quot;yyyy-MM-dd HH:mm&quot;);
		hl7Formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyyMMddHHmm&quot;);	
	} 
	// ISO Date Format: yyyy-MM-dd
	else if ( isoDateString != null &amp;&amp; isoDateString.length == 10 ) {
		isoFormatter = new Packages.java.text.SimpleDateFormat(&quot;yyyy-MM-dd&quot;);
		hl7Formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyyMMdd&quot;);	
	}
	// None of the above, return original date string.
	else dateString = isoDateString;

	try {
		if (isoFormatter) {
			hl7Date = isoFormatter.parse(isoDateString);
			hl7Date = hl7Formatter.format(hl7Date);
			dateString = new String(hl7Date);
		}
	} catch (err) {
		dateString = isoDateString;
	} finally {
		return dateString;
	}
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.5.1">
            <id>1e4358bb-21bc-4823-bc55-e41caff65bea</id>
            <name>convertDate</name>
            <revision>1</revision>
            <lastModified>
              <time>1502489831341</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	convertDate(date, outpattern)
*/
// modify function_name and parameters as you wish.
// one function per template is recommended. i.e.) create a new code template for each new function.
var patterns = [
	&apos;yyyy-MM-dd HH:mm:ss:SSS&apos;,
	&apos;yyyy-MM-dd HH:mm:ss.SSS&apos;,
	&apos;yyyy-MM-dd HH:mm:ss&apos;,
	&apos;yyyy-MM-dd HH:mm&apos;,
	&apos;EEE MMM dd HH:mm:ss:SSS zzz yyyy&apos;,
	&apos;EEE MMM dd HH:mm:ss.SSS zzz yyyy&apos;,
	&apos;EEE MMM dd HH:mm:ss zzz yyyy&apos;,
	&apos;EEE MMM dd zzz yyyy&apos;,
	&apos;dd-MMM-yyyy HH:mm:ss:SSS&apos;,
	&apos;dd-MMM-yyyy HH:mm:ss.SSS&apos;,
	&apos;dd-MMM-yyyy HH:mm:ss&apos;,
	&apos;yyyy-MM-dd&apos;,
	&apos;yyyy MM dd&apos;,
	&apos;yyyy.MM.dd&apos;,
	&apos;MM-dd-yyyy&apos;,
	&apos;MM dd yyyy&apos;,
	&apos;MM.dd.yyyy&apos;,
	&apos;HH:mm:ss:SSS&apos;,
	&apos;HH:mm:ss.SSS&apos;,
	&apos;HH:mm:ss&apos;,
	&apos;yyyyMMddHHmmssSSS&apos;,
	&apos;yyyyMMddHHmmss&apos;,
	&apos;yyyyMMddHHmm&apos;,
	&apos;hh:mm aa&apos;];

var formatters = [];
for each (pattern in patterns) {
	formatters.push(org.joda.time.format.DateTimeFormat.forPattern(pattern));
}

function convertDate(date, outpattern) {
	var instant = 0;
	if (typeof date == &apos;number&apos; || date instanceof java.lang.Number)
		instant = new Number(date);
	else if (date instanceof Date || date instanceof java.util.Date)
		instant = date.getTime();
	else if (date instanceof org.joda.time.ReadableInstant)
		instant = date.getMillis();
	else {
		for each (formatter in formatters) {
			try {
				instant = formatter.parseMillis(new String(date));
				break;
			} catch(e) {}
		}
	}

	return org.joda.time.format.DateTimeFormat.forPattern(outpattern).print(instant);
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.5.1">
            <id>c741ad20-3baa-4880-a355-79761040ed4a</id>
            <name>createSegmentBefore</name>
            <revision>1</revision>
            <lastModified>
              <time>1502489831364</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	createSegmentBefore
*/
// modify function_name and parameters as you wish.
// one function per template is recommended. i.e.) create a new code template for each new function.
function createSegmentBefore(insertSegmentName, beforeThisSegment) {
	var msgObj = beforeThisSegment;
	while (msgObj.parent() != undefined) {
		msgObj = msgObj.parent();
	}
	msgObj.insertChildBefore(beforeThisSegment[0], new XML(&apos;&lt;&apos; + insertSegmentName + &apos;&gt;&lt;/&apos; + insertSegmentName + &apos;&gt;&apos;));
	return msgObj.child(beforeThisSegment[0].childIndex() - 1);
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.5.1">
            <id>a5e92dbd-69ee-408e-90bf-7ab5f0539f2f</id>
            <name>currentDate_yyyyMMddhhmmss</name>
            <revision>8</revision>
            <lastModified>
              <time>1517525072758</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/** currentDate_yyyyMMddhhmmss

	@return {String} return currentDate in yyyyMMddhhmmss string format

	// Modified: To include addition checks on the length of each datepart 
*/
function currentDate_yyyyMMddhhmmss() {

	var debug= 0;
	
	var today = new Date();
	var day = today.getDate();
	var month = today.getMonth()+1; //January is 0!
	var year = today.getFullYear();
	var hour = today.getHours();	// 0-23
	var minute = today.getMinutes();	// 0-59
	var second = today.getSeconds();  // 0-59

	if(day.toString().length&lt;2) { day = &apos;0&apos;+day } 
	if(month.toString().length&lt;2) { month = &apos;0&apos;+month }
	if(hour.toString().length&lt;2) { hour = &apos;0&apos;+hour }
	if(minute.toString().length&lt;2) { minute = &apos;0&apos;+minute }
	if(second.toString().length&lt;2) { second = &apos;0&apos;+second }

	var newDate= year+month+day+hour+minute+second;
	if(debug&gt;0) { logger.error(&quot;currentDate_yyyyMMddhhmmss() returns: &quot;+newDate); }
	return newDate;

}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.5.1">
            <id>d0d5a392-cea8-40e7-9c12-dd8547c8b51e</id>
            <name>daysBetween</name>
            <revision>1</revision>
            <lastModified>
              <time>1502489831376</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	daysBetween(begin, end, pattern)
*/
// modify function_name and parameters as you wish.
// one function per template is recommended. i.e.) create a new code template for each new function.
function daysBetween(begin,end,pattern) {
	importPackage(org.joda.time);
	importPackage(org.joda.time.format);
	String.prototype.toDate = function(pattern) {return DateTimeFormat.forPattern(pattern || &apos;yyyyMMddHHmmss&apos;).parseDateTime(this);};
	return Days.daysBetween(convert(begin),convert(end)).getDays();
	function convert(object) {
		if (&apos;string&apos; === typeof object || object instanceof String)
			return (object + &apos;19700101000000&apos;.substr(object.length)).toDate(pattern);
		else if (object instanceof Date || object instanceof java.util.Date)
			return new DateTime(object.getTime());
		else 
			return new DateTime(object);
	}
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.5.1">
            <id>8ee9e3a6-5cf4-4b68-bdcc-7b5013860cb8</id>
            <name>executeOperation</name>
            <revision>3</revision>
            <lastModified>
              <time>1527795423647</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Executes executeOperation(operation, expression, parameters) - references getDBConnection

	@param 
	{string operation} - executeUpdate (INSERT|UPDATE), executeCachedQuery (SELECT) operations 
	{string expression} - expression of INSERT, UPDATE, DELETE or SELECT statements
	{string parameters} - parameterized parameter values accompanying the expression statement
	@return {DatabaseConnection} The database connection dbConn object.
	
	Example
	executeOperation(&apos;executeUpdate&apos;, expression, parameters);
	WHERE
	var expression = &quot;INSERT INTO hl7_test_sample (patient_last_name, patient_first_name, patient_middle_initial) VALUES (?, ?, ?);&quot;
	var result = dbConn.executeUpdate(expression, params);
*/

function executeOperation(operation, expression, parameters) {

	var dbConn = getDBConnection(true);
	var attempts = 0;
	var maxAttempts = NumberUtils.toInt($(&apos;dbRetries&apos;) + &apos;&apos;, 0) + 1;

	while (attempts &lt; maxAttempts) {
		attempts++;

		try {
			if (parameters) {
				for (var i in parameters) {
					var param = parameters[i];
					if (param instanceof Number) {
						parameters[i] = new java.lang.Integer(param);
					}
				}
				
				return dbConn[operation](expression, java.util.Arrays.asList(parameters));
			} else {
				return dbConn[operation](expression);
			}
		} catch (e) {
			logger.info(&apos;Error executing statement, checking if valid...&apos;);

			try {
				dbConn.executeCachedQuery(&apos;SELECT 1&apos;);
			} catch (e2) {
				logger.info(&apos;Connection invalid, recreating...&apos;);

				try {
					dbConn = getDBConnection(true);
				} catch (e3) {}
			}

			if (attempts &gt;= maxAttempts) {
				var errorMessage = &apos;Unable to execute statement.\n&apos;;
				errorMessage += &apos;Expression: &apos; + expression + &apos;\n&apos;;
				if (parameters) {
					errorMessage += &apos;Parameters: &apos; + java.util.Arrays.asList(parameters).toString();
				}
				logger.error(errorMessage, e.javaException);
				throw e;
			}

			java.lang.Thread.sleep(1000);
		}
	}
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.5.1">
            <id>7a091e64-db98-4f28-9990-59e8a7a67b4a</id>
            <name>getByteCount</name>
            <revision>1</revision>
            <lastModified>
              <time>1518489356999</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/** getByteCount
	
	- Desc: provide string and determine the byteSize of the string

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function getByteCount( s )
{
  var count = 0, stringLength = s.length, i;
  s = String( s || &quot;&quot; );
  for( i = 0 ; i &lt; stringLength ; i++ )
  {
    var partCount = encodeURI( s[i] ).split(&quot;%&quot;).length;
    count += partCount==1?1:partCount-1;
  }
  return count;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.5.1">
            <id>6c50e580-bb31-4b00-9b20-d47caa381eb9</id>
            <name>getByteLen</name>
            <revision>1</revision>
            <lastModified>
              <time>1518489683097</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/** getByteLen 

	Using UTF-8 character determine number of Bytes in UTF-8 string
 	Count bytes in a string&apos;s UTF-8 representation.
 
 	@param   string
 	@return  int
*/

function getByteLen(normal_val) {
    // Force string type
    normal_val = String(normal_val);

    var byteLen = 0;
    for (var i = 0; i &lt; normal_val.length; i++) {
        var c = normal_val.charCodeAt(i);
        byteLen += c &lt; (1 &lt;&lt;  7) ? 1 :
                   c &lt; (1 &lt;&lt; 11) ? 2 :
                   c &lt; (1 &lt;&lt; 16) ? 3 :
                   c &lt; (1 &lt;&lt; 21) ? 4 :
                   c &lt; (1 &lt;&lt; 26) ? 5 :
                   c &lt; (1 &lt;&lt; 31) ? 6 : Number.NaN;
    }
    return byteLen;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.5.1">
            <id>1c06363e-daf9-4a6c-b35c-f4208db4b701</id>
            <name>getDBConnection</name>
            <revision>2</revision>
            <lastModified>
              <time>1527381258822</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	getDBConnection - Retrieves the database connection from the global channel map, creating a new one if necessary.

	@param {Boolean} recreate - If true, the connection will always be closed and created anew.
	@return {DatabaseConnection} The database connection object.
*/
function getDBConnection(recreate) {
	var dbConn = $gc(&apos;dbConn&apos;);

	if (!dbConn || recreate) {
		if (dbConn) {
			try {
				dbConn.close();
			} catch (e) {}
		}
		dbConn = DatabaseConnectionFactory.createDatabaseConnection($(&apos;mysqlDriverString&apos;), $(&apos;mysqlUrlLocalHostString&apos;), $(&apos;mysqlUser&apos;), $(&apos;mysqlPassword&apos;));
		$gc(&apos;dbConn&apos;, dbConn);
	}

	return dbConn;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.5.1">
            <id>6bc382b4-149d-4c27-a333-a76af0a63fb9</id>
            <name>getMySqlConn</name>
            <revision>1</revision>
            <lastModified>
              <time>1502489831350</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>CHANNEL_UNDEPLOY</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>CHANNEL_DEPLOY</contextType>
                <contextType>GLOBAL_POSTPROCESSOR</contextType>
                <contextType>CHANNEL_BATCH</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>CHANNEL_POSTPROCESSOR</contextType>
                <contextType>CHANNEL_ATTACHMENT</contextType>
                <contextType>CHANNEL_PREPROCESSOR</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	getMySqlConn
*/
// code template
function getMySqlConn() { 
    return DatabaseConnectionFactory.createDatabaseConnection($(&apos;mysqlDriverString&apos;) , $(&apos;mysqlUrlLocalHostString&apos;) , $(&apos;mysqlUser&apos;) , $(&apos;mysqlPassword&apos;));
} // end function</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.5.1">
            <id>4cb42e06-7c9a-4fd2-bcb5-b9f4053a9c19</id>
            <name>getSegmentsAfter</name>
            <revision>2</revision>
            <lastModified>
              <time>1525526636419</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Returns an array of segments with the specified name that come after a given segment in the message.
*/
/*
	Author: Nick Rupley
	Date Modified: 2/13/2013
	getSegmentsAfter: Returns an array of segments with the specified name that come after a given segment in the message.

	Arguments
	---------
		Required
		--------
			root:			The root HL7Message node of the message, or the parent of the segment node.
			startSeg:		The segment AFTER which to start collecting segments.
			segName:		The name (String or RegExp) of the segments you want to collect.

		Optional
		--------
			consecutiveInd:	If true, indicates that the segments are expected to come directly after startSeg. 
							If false, segments are collected until another segment with the same name as startSeg is encountered.
							Defaults to false.
			stopSegNames:	An array of segment names that, when encountered, stop the collection of segments.
*/

function getSegmentsAfter(root, startSeg, segName, consecutiveInd, stopSegNames) {
	function test(str) {
		return segName instanceof RegExp ? segName.test(str) : segName === str;
	}

	// The index to start collection is the next one up from the starting segment
	var index = startSeg.childIndex()+1;
	// The return array
	var out = [];
	// Boolean placeholder to stop iteration
	var done = false;
	// Object that will contain all of the stopSegNames strings, bound to a truthy value (1)
	var stopNames = {};
	// Indicates whether we have any stop segments
	var stopNamesInd = false;
	// If stopSegNames is defined
	if (stopSegNames !== undefined &amp;&amp; stopSegNames !== null) {
		// Set our indicator to true
		stopNamesInd = true;
		// Add each string in the array to our object
		for each (name in stopSegNames)
			stopNames[name] = 1;
	}

	// Iterate through each child in the root, starting at the segment after startSeg, and
	// ending at the final segment, or when the done flag is set to true.
	while (index &lt; root.children().length() &amp;&amp; !done) {
		// If a stop segment is encountered, stop iteration
		if (stopNamesInd &amp;&amp; root.children()[index].name().toString() in stopNames)
			done = true;
		// If a segment with the same name as startSeg is encountered, stop iteration
		else if (root.children()[index].name().toString() == startSeg.name().toString() &amp;&amp; !consecutiveInd)
			done = true;
		// If we&apos;re only collecting consecutive segments and we encounter a segment with a name other than segName, stop iteration
		else if (!test(root.children()[index].name().toString()) &amp;&amp; consecutiveInd)
			done = true;
		// If all previous tests passed, and the current segment has a name of segName, then add it to our array
		else if (test(root.children()[index].name().toString()))
			out.push(root.children()[index]);
		// Increment our index counter
		index++;
	}

	// Return the output array
	return out;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.5.1">
            <id>9fd1f0f6-a856-483d-a8b5-ec707df483d4</id>
            <name>getXSLTransformation</name>
            <revision>1</revision>
            <lastModified>
              <time>1502489831355</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	getXSLTransformation(source, xsltFilePath)
*/
function getXSLTransformation(source, xsltFilePath) { 
	var reader = new Packages.java.io.StringReader(source.toString()); 
	var result = new Packages.java.io.StringWriter(); 
	var xsltFile = new Packages.java.io.File(xsltFilePath); 
	var xsltSource = new Packages.javax.xml.transform.stream.StreamSource(xsltFile); 
	try { 
		var transFact = new Packages.javax.xml.transform.TransformerFactory.newInstance(); 
		var transXSLT = transFact.newTemplates(xsltSource); 
		var trans = transXSLT.newTransformer(); 
		trans.transform(new Packages.javax.xml.transform.stream.StreamSource(reader), new Packages.javax.xml.transform.stream.StreamResult(result)); 
	} catch(err) {
		logger.error(&apos;getXSLTransformation exception: &apos; + err); 
	} // end try
	return result.toString().replace(&apos;&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&apos;,&apos;&apos;); 
} // end function</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.5.1">
            <id>4bf0193f-6728-4c89-ae26-63d8c913ba67</id>
            <name>insert_into_table</name>
            <revision>1</revision>
            <lastModified>
              <time>1502489831346</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>CHANNEL_UNDEPLOY</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>CHANNEL_DEPLOY</contextType>
                <contextType>GLOBAL_POSTPROCESSOR</contextType>
                <contextType>CHANNEL_BATCH</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>CHANNEL_POSTPROCESSOR</contextType>
                <contextType>CHANNEL_ATTACHMENT</contextType>
                <contextType>CHANNEL_PREPROCESSOR</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	insert_into_table(tableName, columnArray, debug, select_log)
*/
function insert_into_table(tableName, columnArray, debug, select_log) {
	// targetColumnArray= {&apos;exam_code&apos;,&apos;exam_source&apos;};
	// columnArray= {&apos;exam_code:ARTMJRT&apos;,&apos;exam_description:ARTHROGRAM TEMPOROMANDIBULAR JOINT RIGHT&apos;,&apos;exam_source:RISIC&apos;,&apos;source_description:FINAL RISIC EXAM IC CODES POST 8-11-15&apos;};
	var insert_log= select_log
	if(typeof(debug)== &apos;undefined&apos;) 		var debug= 0;
	if(typeof(insert_log)== &apos;undefined&apos;)	var insert_log= &apos;&apos;;
	var i= 1;
	// define insert statement
	// 		if(column.split(&quot;:&quot;)[0].toString().indexOf(&apos;date&apos;)&lt;0)
	var insert= &quot;INSERT INTO &quot; + tableName + &quot; (&quot;;
	for each(column in columnArray) {
		if(i&lt;columnArray.length)
			insert+= column.split(&quot;:&quot;)[0]+&quot;,&quot;;
		else
			insert+= column.split(&quot;:&quot;)[0] + &quot;)&quot;;
		i++;
	} // end for each
	insert+= &quot; VALUES (&quot;;
	var i= 1;
	for each(colValue in columnArray) {
		if(colValue.split(&quot;:&quot;)[0].toString().indexOf(&apos;date&apos;)&lt;0)
			if(i&lt;columnArray.length)
				insert+= &quot;&apos;&quot;+colValue.split(&quot;:&quot;)[1]+&quot;&apos;,&quot;;
			else
				insert+= &quot;&apos;&quot;+colValue.split(&quot;:&quot;)[1] + &quot;&apos;);&quot;;
		else
			if(i&gt;=columnArray.length)
				insert+= &quot;NOW());&quot;;
			else
				insert+= &quot;NOW(),&quot;;
		i++;
	} // end for each
	if(debug&gt;=1) channelMap.put(&apos;insert_&apos;+tableName,insert);
	try {
		var dbConn= getMySqlConn();
		// dbConn = DatabaseConnectionFactory.createDatabaseConnection($(&apos;mysqlDriverString&apos;),$(&apos;mysqlUrlLocalHostString&apos;),$(&apos;mysqlUser&apos;),$(&apos;mysqlPassword&apos;));
		var result = dbConn.executeUpdate(insert);
		if (result != null) {
			insert_log+= &apos; Attempt to insert record for exam_source. &apos;;
			var i= 1;
			for each(column in columnArray) {
				var columnName=   column.split(&quot;:&quot;)[0].toString();
				var columnValue=  column.split(&quot;:&quot;)[1].toString();
				if(i&lt;columnArray.length) 
					insert_log+= columnName+&apos;= &apos;+columnValue+&apos; AND &apos;;
				else
					insert_log+= columnName+&apos;= &apos;+columnValue+&apos;.&apos;;
				i++;
			} // end for each
			channelMap.put(&apos;action&apos;,&apos;INSERT&apos;);
			if(debug&gt;=1) channelMap.put(&apos;insert_log_&apos;+tableName,insert_log);
			if(debug&gt;=2) logger.error(&quot;[Insert &quot;+tableName+&quot;] &quot;+insert_log);
			channelMap.put(&apos;select_log&apos;,insert_log+=&apos; [Inserted record]&apos;);
		} else {
			channelMap.put(&apos;action&apos;,&apos;FAILED INSERT&apos;);
			channelMap.put(&apos;select_log&apos;,insert_log+=&apos; [Failed to insert record]&apos;);
		} // end if	
		dbConn.close();
	} catch(err){
		logger.error(err);
		channelMap.put(&apos;action&apos;,&apos;ERROR&apos;);
	} finally {	
		if (dbConn) { 
			dbConn.close();
		}
	} // end try
} // end function</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.5.1">
            <id>e250b526-5bcc-4973-ae7b-7efa49605a2a</id>
            <name>insertSegmentAfter</name>
            <revision>1</revision>
            <lastModified>
              <time>1502489831380</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	insertSegmentAfter
*/
// modify function_name and parameters as you wish.
// one function per template is recommended. i.e.) create a new code template for each new function.
function insertSegmentAfter(insertSegment, afterThisSegment) {
	var msgObj = afterThisSegment;
	while (msgObj.parent() != undefined) {
		msgObj = msgObj.parent();
	}
	msgObj.insertChildAfter(afterThisSegment[0], insertSegment);
	return msgObj.child(afterThisSegment[0].childIndex() + 1);
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.5.1">
            <id>1525b940-91eb-4afc-871c-b0d5ad6ac337</id>
            <name>insertSegmentBefore</name>
            <revision>1</revision>
            <lastModified>
              <time>1502489831336</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	insertSegmentBefore
*/
// modify function_name and parameters as you wish.
// one function per template is recommended. i.e.) create a new code template for each new function.
function insertSegmentBefore(insertSegment, beforeThisSegment) {
	var msgObj = beforeThisSegment;
	while (msgObj.parent() != undefined) {
		msgObj = msgObj.parent();
	}
	msgObj.insertChildBefore(beforeThisSegment[0], insertSegment);
	return msgObj.child(beforeThisSegment[0].childIndex() - 1);
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.5.1">
            <id>0a6a03d5-9525-4090-ad10-d17c3ab742e9</id>
            <name>removeDupAttributesFromXML</name>
            <revision>1</revision>
            <lastModified>
              <time>1502489831325</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>CHANNEL_UNDEPLOY</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>CHANNEL_DEPLOY</contextType>
                <contextType>GLOBAL_POSTPROCESSOR</contextType>
                <contextType>CHANNEL_BATCH</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>CHANNEL_POSTPROCESSOR</contextType>
                <contextType>CHANNEL_ATTACHMENT</contextType>
                <contextType>CHANNEL_PREPROCESSOR</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	removeDuplicateAttributesFromXML
*/
// modify function_name and parameters as you wish.
// one function per template is recommended. i.e.) create a new code template for each new function.
function removeDuplicateAttributesFromXML(section) {
	// desc: Remove Duplicate Telecom Attributes from XML
	var debug= 1 // 0= OFF, 1= channelMap, 2= logger.error
	var tDescription= &apos;[Pre-Processor][Remove Duplicate Telecom Attributes from XML]&apos;;
	var arrObservation= new Array();
	var i= 0
	// use section instead of message but convert section to message variable
	var message= section;
	if(debug&gt;=2) logger.error(&apos;original msg Section= &apos;+message);

	if(message.toString().indexOf(&apos;author&apos;)&gt;-1) {
		author= message;
		if(debug&gt;=2) logger.error(&apos;message= &apos;+message);
		if(author.toString().indexOf(&apos;assignedAuthor&apos;)&gt;-1) {
			var beginAssignedAuthor= author.toString().indexOf(&apos;&lt;assignedAuthor&gt;&apos;);
			var endAssignedAuthor= author.toString().indexOf(&apos;&lt;/assignedAuthor&gt;&apos;);
			var assignedAuthor= author.toString().substring(beginAssignedAuthor, endAssignedAuthor);
			if(debug&gt;=2) logger.error(&apos;assignedAuthor= &apos;+assignedAuthor);
			if(assignedAuthor.toString().indexOf(&apos;representedOrganization&apos;)&gt;-1) {
				var beginRepresentedOrganization= assignedAuthor.toString().indexOf(&apos;&lt;representedOrganization&gt;&apos;);
				var endRepresentedOrganization= assignedAuthor.toString().indexOf(&apos;&lt;/representedOrganization&gt;&apos;);
				var representedOrganization= assignedAuthor.toString().substring(beginRepresentedOrganization, endRepresentedOrganization);
				if(debug&gt;=2) logger.error(&apos;begin= &apos;+beginRepresentedOrganization+&apos; end= &apos;+endRepresentedOrganization+&apos; representedOrganization= &apos;+representedOrganization);
				if(representedOrganization.toString().indexOf(&apos;telecom&apos;)&gt;-1) {
					var beginTelecom= representedOrganization.toString().indexOf(&apos;&lt;telecom&apos;);
					var endTelecom= representedOrganization.toString().indexOf(&apos;&lt;addr&apos;);
					var telecom= representedOrganization.toString().substring(beginTelecom, endTelecom);
					if(debug&gt;=2) logger.error(&apos;begin= &apos;+beginTelecom+&apos; end= &apos;+endTelecom+&apos; telecom= &apos;+telecom);
					var objObservation= new Object();
					objObservation.id= i;
					beginTelecomValue= 		telecom.toString().indexOf(&apos;value=&apos;);
					endTelecomValue=   		telecom.toString().indexOf(&apos; use=&apos;);
					objObservation.value=	telecom.toString().substring(beginTelecomValue+6, endTelecomValue).replace(/&quot;/g,&apos;&apos;)
					beginTelecomUse=   		telecom.toString().indexOf(&apos;use=&apos;);
					objObservation.use= 	telecom.toString().substring(beginTelecomUse+4, beginTelecomUse+7).replace(/&quot;/g,&apos;&apos;);
					arrObservation.push(objObservation);
					var newTelecom= &apos;&lt;telecom value=&quot;&apos;+objObservation.value+&apos;&quot; use=&quot;&apos;+objObservation.use+&apos;&quot;/&gt;&apos;;
					var newRepresentedOrganization= representedOrganization.replace(telecom, newTelecom);
					if(debug&gt;=1) channelMap.put(tDescription,&apos;old= &apos;+telecom+&apos; new= &apos;+newTelecom);
					if(debug&gt;=2) logger.error(tDescription+&apos; old= &apos;+telecom+&apos; new= &apos;+newTelecom);
				} // end if
			} // end if 
			var newAssignedAuthor= assignedAuthor.replace(representedOrganization,newRepresentedOrganization);
		} // end if 
		var newAuthor=		author.replace(assignedAuthor,newAssignedAuthor);
		var newXmlMsg=		message.replace(author,newAuthor);
	} else if(message.toString().indexOf(&apos;custodian&apos;)&gt;-1) {
		custodian= message;
		if(debug&gt;=2) logger.error(&apos;message= &apos;+message);
		if(custodian.toString().indexOf(&apos;assignedCustodian&apos;)&gt;-1) {
			var beginAssignedCustodian= custodian.toString().indexOf(&apos;&lt;assignedCustodian&gt;&apos;);
			var endAssignedCustodian= 	custodian.toString().indexOf(&apos;&lt;/assignedCustodian&gt;&apos;);
			var assignedCustodian= 		custodian.toString().substring(beginAssignedCustodian, endAssignedCustodian);
			if(debug&gt;=2) logger.error(&apos;assignedCustodian= &apos;+assignedCustodian);
			if(assignedCustodian.toString().indexOf(&apos;representedCustodianOrganization&apos;)&gt;-1) {
				var beginRepresentedCustodianOrganization=	assignedCustodian.toString().indexOf(&apos;&lt;representedCustodianOrganization&gt;&apos;);
				var endRepresentedCustodianOrganization=	assignedCustodian.toString().indexOf(&apos;&lt;/representedCustodianOrganization&gt;&apos;);
				var representedCustodianOrganization= assignedCustodian.toString().substring(beginRepresentedCustodianOrganization, endRepresentedCustodianOrganization);
				if(debug&gt;=2) logger.error(&apos;begin= &apos;+beginRepresentedCustodianOrganization+&apos; end= &apos;+endRepresentedCustodianOrganization+&apos; representedOrganization= &apos;+representedCustodianOrganization);
				if(representedCustodianOrganization.toString().indexOf(&apos;telecom&apos;)&gt;-1) {
					var beginTelecom=		representedCustodianOrganization.toString().indexOf(&apos;&lt;telecom&apos;);
					var endTelecom= 		representedCustodianOrganization.toString().indexOf(&apos;&lt;addr&apos;);
					var telecom= 			representedCustodianOrganization.toString().substring(beginTelecom, endTelecom);
					if(debug&gt;=2) logger.error(&apos;begin= &apos;+beginTelecom+&apos; end= &apos;+endTelecom+&apos; telecom= &apos;+telecom);
					var objObservation= 	new Object();
					objObservation.id= 		i;
					beginTelecomValue= 		telecom.toString().indexOf(&apos;value=&apos;);
					endTelecomValue=   		telecom.toString().indexOf(&apos; use=&apos;);
					objObservation.value=	telecom.toString().substring(beginTelecomValue+6, endTelecomValue).replace(/&quot;/g,&apos;&apos;)
					beginTelecomUse=   		telecom.toString().indexOf(&apos;use=&apos;);
					objObservation.use= 	telecom.toString().substring(beginTelecomUse+4, beginTelecomUse+7).replace(/&quot;/g,&apos;&apos;);
					arrObservation.push(objObservation);
					var newTelecom= &apos;&lt;telecom value=&quot;&apos;+objObservation.value+&apos;&quot; use=&quot;&apos;+objObservation.use+&apos;&quot;/&gt;&apos;;
					var newRepresentedCustodianOrganization= representedCustodianOrganization.replace(telecom, newTelecom);
					if(debug&gt;=1) channelMap.put(tDescription,&apos;old= &apos;+telecom+&apos; new= &apos;+newTelecom);
					if(debug&gt;=2) logger.error(tDescription+&apos; old= &apos;+telecom+&apos; new= &apos;+newTelecom);
				} // end if
			} // end if 
			var newAssignedCustodian= assignedCustodian.replace(representedCustodianOrganization,newRepresentedCustodianOrganization);
		} // end if 
		var newCustodian=	custodian.replace(assignedCustodian,newAssignedCustodian);
		var newXmlMsg=    	message.replace(custodian,newCustodian);
	}// end if 

	if(debug&gt;=2) logger.error(&apos;new msg Section= &apos;+newXmlMsg);
	return newXmlMsg;			// return section
} // end function</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.5.1">
            <id>ccc6ffcd-366c-445a-8cc6-4a087b9611c3</id>
            <name>select_table</name>
            <revision>2</revision>
            <lastModified>
              <time>1527381331549</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>CHANNEL_UNDEPLOY</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>CHANNEL_DEPLOY</contextType>
                <contextType>GLOBAL_POSTPROCESSOR</contextType>
                <contextType>CHANNEL_BATCH</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>CHANNEL_POSTPROCESSOR</contextType>
                <contextType>CHANNEL_ATTACHMENT</contextType>
                <contextType>CHANNEL_PREPROCESSOR</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	select_table(tableName, columnArray, debug, select_log) uses getMySqlConn() function.
*/
function select_table(tableName, columnArray, debug, select_log) {

	if(typeof(debug)== &apos;undefined&apos;) 		var debug= 0;
	if(typeof(select_log)== &apos;undefined&apos;) 	var select_log= &apos;&apos;;
	var select= &quot;SELECT * FROM &quot;+tableName+ &quot; WHERE &quot;;
	var i= 1;
	for each(column in columnArray) {
		if(i&lt;columnArray.length)
			select+= column.split(&quot;:&quot;)[0].toString() + &quot;= &apos;&quot; + column.split(&quot;:&quot;)[1].toString() + &quot;&apos; AND &quot;;
		else
			select+= column.split(&quot;:&quot;)[0].toString() + &quot;= &apos;&quot; + column.split(&quot;:&quot;)[1].toString() + &quot;&apos;;&quot;;
		i++;
	} // end for each
	var select= String(select);
	if(debug&gt;=1) channelMap.put(&apos;select_&apos;+tableName,select);
	try {
		var dbConn= getMySqlConn();
		// dbConn = DatabaseConnectionFactory.createDatabaseConnection($(&apos;mysqlDriverString&apos;),$(&apos;mysqlUrlLocalHostString&apos;),$(&apos;mysqlUser&apos;),$(&apos;mysqlPassword&apos;));
		// var result = dbConn.executeUpdate(update);
		var result= dbConn.executeCachedQuery(select);
		if (result != null) {
			if(result.size()&gt;0) {
				select_log+= &apos; Found record for exam_source.&apos;;
				channelMap.put(&apos;action&apos;,&apos;FILTER FOUND&apos;);
				if(debug&gt;=1) channelMap.put(&apos;select_log_&apos;+tableName,select_log);
				if(debug&gt;=2) logger.error(&apos;[Select &apos;+tableName+&apos;]: &apos;+select_log);
				// return true;
			} else {
				select_log+= &apos; Failed to find 0 records for exam source.&apos;;
				if(debug&gt;=1) channelMap.put(&apos;select_log_&apos;+tableName,select_log);
				if(debug&gt;=2) logger.error(&apos;[Select &apos;+tableName+&apos;]: &apos;+select_log);
			} // end if 
		} else {
			select_log+= &apos; Failed to find 0 records for exam source.&apos;;
			if(debug&gt;=1) channelMap.put(&apos;select_log_&apos;+tableName,select_log);
			if(debug&gt;=2) logger.error(&apos;[Select &apos;+tableName+&apos;]: &apos;+select_log);
			// return false;
		} // end if	
		dbConn.close();
	} catch(err){
		logger.error(err);
	} finally {	
		if (dbConn) { 
			dbConn.close();
		}
	} // end try
	channelMap.put(&apos;select_log&apos;,select_log);
	return select_log;
} // end function</code>
            </properties>
          </codeTemplate>
        </codeTemplates>
      </codeTemplateLibrary>
    </codeTemplateLibraries>
    <channelTags>
      <channelTag>
        <id>ddbc3fdc-2ce4-4e3f-9447-f0e287c793eb</id>
        <name>Advinow</name>
        <channelIds>
          <string>5beae4c2-e7f8-4ae3-9fca-703dea9233a2</string>
          <string>82ac96ff-a32d-42b2-81a4-80ebda4783db</string>
          <string>e882ff76-1127-4e35-838c-93cbc2655ef9</string>
        </channelIds>
        <backgroundColor>
          <red>128</red>
          <green>128</green>
          <blue>0</blue>
          <alpha>255</alpha>
        </backgroundColor>
      </channelTag>
      <channelTag>
        <id>dc204463-f36f-4c34-889a-b63430174228</id>
        <name>CCD</name>
        <channelIds>
          <string>280d822c-1479-4fb6-9e2a-b7267e540c63</string>
          <string>197d7939-edb9-4dc7-af2d-ab91ae9023ad</string>
          <string>15708463-af53-428c-88f5-16351dd49b2e</string>
          <string>82ac96ff-a32d-42b2-81a4-80ebda4783db</string>
          <string>03bc65a0-25b4-48f5-8455-7e58e71b1446</string>
          <string>24504c80-a7ef-496d-bca0-c25ce27f4d19</string>
          <string>2f6cd9fb-90e2-4121-b05a-cad72d278cc3</string>
          <string>2dbdcefd-11b5-42c8-a365-05038df92fef</string>
          <string>06bd4ce9-2338-4c78-86fb-2e04ff9f9e08</string>
          <string>0edf321a-b712-47e2-972a-03f2c4c8f0ac</string>
          <string>e882ff76-1127-4e35-838c-93cbc2655ef9</string>
        </channelIds>
        <backgroundColor>
          <red>0</red>
          <green>255</green>
          <blue>0</blue>
          <alpha>255</alpha>
        </backgroundColor>
      </channelTag>
      <channelTag>
        <id>815bc044-0828-4655-a884-05294aee5b5c</id>
        <name>IN</name>
        <channelIds>
          <string>03bc65a0-25b4-48f5-8455-7e58e71b1446</string>
          <string>e882ff76-1127-4e35-838c-93cbc2655ef9</string>
        </channelIds>
        <backgroundColor>
          <red>128</red>
          <green>128</green>
          <blue>0</blue>
          <alpha>255</alpha>
        </backgroundColor>
      </channelTag>
      <channelTag>
        <id>2a3fa66b-252a-4646-a5a8-219bcfd327b5</id>
        <name>ToFile</name>
        <channelIds>
          <string>e882ff76-1127-4e35-838c-93cbc2655ef9</string>
        </channelIds>
        <backgroundColor>
          <red>255</red>
          <green>0</green>
          <blue>0</blue>
          <alpha>255</alpha>
        </backgroundColor>
      </channelTag>
      <channelTag>
        <id>314c1df6-5bb3-402f-b188-fa728d9676c0</id>
        <name>XML</name>
        <channelIds>
          <string>280d822c-1479-4fb6-9e2a-b7267e540c63</string>
          <string>197d7939-edb9-4dc7-af2d-ab91ae9023ad</string>
          <string>15708463-af53-428c-88f5-16351dd49b2e</string>
          <string>82ac96ff-a32d-42b2-81a4-80ebda4783db</string>
          <string>03bc65a0-25b4-48f5-8455-7e58e71b1446</string>
          <string>24504c80-a7ef-496d-bca0-c25ce27f4d19</string>
          <string>2f6cd9fb-90e2-4121-b05a-cad72d278cc3</string>
          <string>2dbdcefd-11b5-42c8-a365-05038df92fef</string>
          <string>06bd4ce9-2338-4c78-86fb-2e04ff9f9e08</string>
          <string>0edf321a-b712-47e2-972a-03f2c4c8f0ac</string>
          <string>e882ff76-1127-4e35-838c-93cbc2655ef9</string>
        </channelIds>
        <backgroundColor>
          <red>0</red>
          <green>128</green>
          <blue>128</blue>
          <alpha>255</alpha>
        </backgroundColor>
      </channelTag>
    </channelTags>
  </exportData>
</channel>